<?xml version="1.0" encoding="UTF-8"?>
<!--Arbortext, Inc., 1988-2011, v.4002-->
<!DOCTYPE reference PUBLIC "-//IBM//DTD DITA IBM Reference//EN"
 "ibm-reference.dtd">
<?Pub Sty _display FontColor="red"?>
<?Pub Inc?>
<reference id="crypto_samples" xml:lang="en-us" rev="shv2">
      <title>Cryptographic operations</title>
<titlealts>
<navtitle>Cryptographic operations</navtitle>
<searchtitle><ph conref="lxcommon.dita#phrases/lib_title"/> and <keyword
conref="lxoc_conref.dita#lxoc_conref/ocrypto"/>: Cryptographic operations</searchtitle>
</titlealts>
      <shortdesc>When you use your sample code with a static linked library you can access the APIs
directly. View some <keyword conref="lxoc_conref.dita#lxoc_conref/ocrypto"/> code samples for
procedures that perform cryptographic operations.</shortdesc>
      <prolog>
            <metadata>
                  <keywords>
                        <indexterm> cryptographic operations</indexterm>
                        <indexterm>code sample<indexterm>cryptographic
                              operations</indexterm></indexterm>
                        <indexterm>sample code<indexterm> cryptographic
                              operations</indexterm></indexterm>
                        <indexterm>openCryptoki<indexterm>C_Encrypt
                                    (AES)</indexterm><indexterm>C_Decrypt
                                    (AES)</indexterm><indexterm>C_Encrypt
                                    (RSA)</indexterm><indexterm>C_Decrypt
                                    (RSA)</indexterm><indexterm>C_GenerateKeyPair
                              (RSA)</indexterm></indexterm>
                        <indexterm>C_Encrypt (AES)</indexterm>
                        <indexterm>C_Decrypt (AES)</indexterm>
                        <indexterm>C_Encrypt (RSA)</indexterm>
                        <indexterm>C_Decrypt (RSA)</indexterm>
                        <indexterm>C_GenerateKeyPair (RSA)</indexterm>
                  </keywords>
            </metadata>
      </prolog>
      <refbody><?Pub Caret 0?>
            <section>
                  <title>C_Encrypt (AES):</title>
                  <screen>/*
 * AES encrypt
 */
CK_RV AESencrypt(CK_SESSION_HANDLE hSession,
		 CK_BYTE_PTR pClearData,  CK_ULONG ulClearDataLen,
		 CK_BYTE **pEncryptedData, CK_ULONG_PTR pulEncryptedDataLen) {
  CK_RV rc;
  CK_MECHANISM myMechanism = {CKM_AES_CBC_PAD, "01020304050607081122334455667788", 16};
  CK_MECHANISM_PTR pMechanism = &amp;myMechanism;
  CK_OBJECT_HANDLE hKey;
  getKey("My_AES_Key", sizeof("My_AES_Key"), &amp;hKey, hSession);
  rc = C_EncryptInit(hSession, pMechanism, hKey);
  if (rc != CKR_OK) {
	printf("Error initializing encryption: 0x%X\n", rc);
	return rc;
  }
  rc = C_Encrypt(hSession, pClearData, ulClearDataLen,
		 NULL, pulEncryptedDataLen);
  if (rc != CKR_OK) {
	printf("Error during encryption (get length): %x\n", rc);
	return rc;
  }
  *pEncryptedData = (CK_BYTE *)malloc(*pulEncryptedDataLen * sizeof(CK_BYTE));

  rc = C_Encrypt(hSession, pClearData, ulClearDataLen,
		 *pEncryptedData, pulEncryptedDataLen);
  if (rc != CKR_OK) {
	printf("Error during encryption: %x\n", rc);
	return rc;
  }
  printf("Encrypted data: ");
  CK_BYTE_PTR tmp = *pEncryptedData;
  for (count = 0; count &lt; *pulEncryptedDataLen; count++, tmp++) {
	printf("%X", *tmp);
  }
  printf("\n");

  return CKR_OK;
}
</screen>
            </section>
            <section>
                  <title>C_Decrypt (AES):</title>
                  <screen>/*
 * AES decrypt
 */
CK_RV AESdecrypt(CK_SESSION_HANDLE hSession,
		 CK_BYTE_PTR pEncryptedData, CK_ULONG ulEncryptedDataLen,
		 CK_BYTE **pClearData, CK_ULONG_PTR pulClearDataLen) {
  CK_RV rc;
  CK_MECHANISM myMechanism = {CKM_AES_CBC_PAD, "01020304050607081122334455667788", 16};
  CK_MECHANISM_PTR pMechanism = &amp;myMechanism;
  CK_OBJECT_HANDLE hKey;
  getKey("My_AES_Key", sizeof("My_AES_Key"), &amp;hKey, hSession);
  rc = C_DecryptInit(hSession, pMechanism, hKey);
  if (rc != CKR_OK) {
	printf("Error initializing decryption: 0x%X\n", rc);
	return rc;
  }
  rc = C_Decrypt(hSession, pEncryptedData, ulEncryptedDataLen, NULL, pulClearDataLen);
  if (rc != CKR_OK) {
	printf("Error during decryption (get length): %x\n", rc);
	return rc;
  }
  *pClearData = malloc(*pulClearDataLen * sizeof(CK_BYTE));
  rc = C_Decrypt(hSession, pEncryptedData, ulEncryptedDataLen, *pClearData,
       pulClearDataLen);
  if (rc != CKR_OK) {
	printf("Error during decryption: %x\n", rc);
	return rc;
  }
  printf("Decrypted data: ");
  CK_BYTE_PTR tmp = *pClearData;
  for (count = 0; count &lt; *pulClearDataLen; count++, tmp++) {
	printf("%c", *tmp);
  }
  printf("\n");
  return CKR_OK;
}
</screen>
            </section>
            <section>
                  <title>C_GenerateKeyPair (RSA):</title>
                  <screen>/*
 * RSA key generate
 */
CK_RV generateRSAKeyPair(CK_SESSION_HANDLE hSession, CK_ULONG keySize,
			 CK_OBJECT_HANDLE_PTR phPublicKey, CK_OBJECT_HANDLE_PTR phPrivateKey ) {
  CK_RV rc;
  CK_BBOOL true = TRUE;
  CK_BBOOL false = FALSE;
  CK_OBJECT_CLASS keyClassPub = CKO_PUBLIC_KEY;
  CK_OBJECT_CLASS keyClassPriv = CKO_PRIVATE_KEY;
  CK_KEY_TYPE keyTypeRSA = CKK_RSA;
  CK_ULONG modulusBits = keySize;
  CK_BYTE_PTR pModulus = malloc(sizeof(CK_BYTE)*modulusBits/8);
  CK_BYTE publicExponent[] = {1, 0, 1};
  CK_MECHANISM rsaKeyGenMech = {CKM_RSA_PKCS_KEY_PAIR_GEN, NULL_PTR, 0};
  CK_ATTRIBUTE pubKeyTempl[] = {
	{CKA_CLASS, &amp;keyClassPub, sizeof(keyClassPub)},
	{CKA_KEY_TYPE, &amp;keyTypeRSA, sizeof(keyTypeRSA)},
	{CKA_TOKEN, &amp;true, sizeof(true)},
	{CKA_PRIVATE, &amp;true, sizeof(true)},
	{CKA_ENCRYPT, &amp;true, sizeof(true)},
	{CKA_VERIFY, &amp;true, sizeof(true)},
	{CKA_WRAP, &amp;true, sizeof(true)},
	{CKA_MODULUS_BITS, &amp;modulusBits, sizeof(modulusBits)},
	{CKA_PUBLIC_EXPONENT, publicExponent, sizeof(publicExponent)},
	{CKA_LABEL, "My_Private_Token_RSA1024_PubKey",
	sizeof("My_Private_Token_RSA1024_PubKey")},
	{CKA_MODIFIABLE, &amp;true, sizeof(true)},
  };
  CK_ATTRIBUTE privKeyTempl[] = {
	{CKA_CLASS, &amp;keyClassPriv, sizeof(keyClassPriv)},
	{CKA_KEY_TYPE, &amp;keyTypeRSA, sizeof(keyTypeRSA)},
	{CKA_EXTRACTABLE, &amp;true, sizeof(true)},
	{CKA_TOKEN, &amp;true, sizeof(true)},
	{CKA_PRIVATE, &amp;true, sizeof(true)},
	{CKA_SENSITIVE, &amp;true, sizeof(true)},
	{CKA_DECRYPT, &amp;true, sizeof(true)},
	{CKA_SIGN, &amp;true, sizeof(true)},
	{CKA_UNWRAP, &amp;true, sizeof(true)},
	{CKA_LABEL, "My_Private_Token_RSA1024_PrivKey",
	sizeof("My_Private_Token_RSA1024_PrivKey")},
	{CKA_MODIFIABLE, &amp;true, sizeof(true)},
  };
  rc = C_GenerateKeyPair(hSession, &amp;rsaKeyGenMech ,
			 &amp;pubKeyTempl, sizeof(pubKeyTempl)/sizeof (CK_ATTRIBUTE),
			 &amp;privKeyTempl, sizeof(privKeyTempl)/sizeof (CK_ATTRIBUTE),
			 phPublicKey, phPrivateKey);
  if (rc != CKR_OK) {
	printf("Error generating RSA keys: %x\n", rc);
	return rc;
  }
  printf("RSA Key generation successful.\n");
  <ph rev="i1v01">return CKR_OK;</ph>
}
</screen>
            </section>
            <section>
                  <title> C_Encrypt (RSA):</title>
                  <screen>/*
 * RSA encrypt
 */
CK_RV RSAencrypt(CK_SESSION_HANDLE hSession, CK_OBJECT_HANDLE hKey,
		 CK_BYTE_PTR pClearData, CK_ULONG ulClearDataLen,
		 CK_BYTE **pEncryptedData, CK_ULONG_PTR pulEncryptedDataLen) {
  CK_RV rc;
  CK_MECHANISM rsaMechanism = {CKM_RSA_PKCS, NULL_PTR, 0};
  rc = C_EncryptInit(hSession, rsaMechanism, hKey);
  if (rc != CKR_OK) {
	printf("Error initializing RSA encryption: %x\n", rc);
	return rc;
  }
  rc = C_Encrypt(hSession, pClearData, ulClearDataLen,
		 NULL, pulEncryptedDataLen);
  if (rc != CKR_OK) {
	printf("Error during RSA encryption: %x\n", rc);
	return rc;
  }
	
  *pEncryptedData = (CK_BYTE *)malloc(rsaKeyLen * sizeof(CK_BYTE));
  rc = C_Encrypt(hSession, pClearData, ulClearDataLen,
		 *pEncryptedData, pulEncryptedDataLen);
  if (rc != CKR_OK) {
	printf("Error during RSA encryption: %x\n", rc);
	return rc;
  }

  printf("Encrypted data: ");
  CK_BYTE_PTR tmp = *pEncryptedData;
  for (count = 0; count &lt; *pulEncryptedDataLen; count++, tmp++) {
	printf("%X", *tmp);
  }
  printf("\n");
  return CKR_OK;
}
</screen>
            </section>
            <section>
                  <title>C_Decrypt (RSA):</title>
                  <screen>/*
 * RSA decrypt
 */
CK_RV RSAdecrypt(CK_SESSION_HANDLE hSession, CK_OBJECT_HANDLE hKey,
		 CK_BYTE_PTR pEncryptedData, CK_ULONG ulEncryptedDataLen,
		 CK_BYTE **pClearData, CK_ULONG_PTR pulClearDataLen) {
  CK_RV rc;
  CK_MECHANISM rsaMechanism = {CKM_RSA_PKCS, NULL_PTR, 0};
  rc = C_DecryptInit(hSession, rsaMechanism, hKey);
  if (rc != CKR_OK) {
	printf("Error initializing RSA decryption: %x\n", rc);
	return rc;
  }
  rc = C_Decrypt(hSession, pEncryptedData, ulEncryptedDataLen,
		 NULL, pulClearDataLen);
  if (rc != CKR_OK) {
	printf("Error during RSA decryption: %x\n", rc);
	return rc;
  }

  *pClearData = malloc(rsaKeyLen*sizeof(CK_BYTE));
  rc = C_Decrypt(hSession, pEncryptedData, ulEncryptedDataLen,
		 *pClearData, pulClearDataLen);
  if (rc != CKR_OK) {
	printf("Error during RSA decryption: %x\n", rc);
	return rc;
  }
  printf("Decrypted data: ");
  CK_BYTE_PTR tmp = *pClearData;
  for (count = 0; count &lt; *pulClearDataLen; count++, tmp++) {
	printf("%c", *tmp);
  }
  printf("\n");
  return CKR_OK;
}

</screen>
            </section></refbody>
</reference>
<?Pub *0000001770?>
