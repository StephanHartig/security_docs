<?xml version="1.0" encoding="UTF-8"?>
<!--Arbortext, Inc., 1988-2011, v.4002-->
<!DOCTYPE concept PUBLIC "-//IBM//DTD DITA IBM Concept//EN"
 "ibm-concept.dtd">
<?Pub Sty _display FontColor="red"?>
<?Pub Inc?>
<concept id="lxoc_common_attribs" xml:lang="en-us" rev="shv2">
<title>How to create and modify objects</title>
<titlealts>
<navtitle>Create and modify objects</navtitle>
<?Pub Caret -1?>
<searchtitle><ph conref="lxcommon.dita#phrases/lib_title"/>: How to create and modify objects in
<keyword conref="lxoc_conref.dita#lxoc_conref/ocrypto"/></searchtitle>
</titlealts>
<shortdesc>All <keyword conref="lxoc_conref.dita#lxoc_conref/ocrypto"/> functions that create,
modify, or copy objects take a template as one of their arguments, where the template specifies
attribute values. Cryptographic functions that create objects, for example,
<apiname>C_GenerateKey</apiname>, <!--(see Section 5.18)--> may also contribute some additional
attribute values themselves. This depends on which cryptographic mechanism is being performed. In
any case, all the required attributes supported by an object class that do not have default values,
must be specified during object creation, either in the template or by the function
itself.</shortdesc>
<prolog>
<metadata>
<keywords>
<indexterm>objects <indexterm><keyword conref="lxoc_conref.dita#lxoc_conref/ocrypto"
/><indexterm>create</indexterm><indexterm>modify</indexterm></indexterm></indexterm>
<indexterm><keyword conref="lxoc_conref.dita#lxoc_conref/ocrypto"/>
<indexterm>objects</indexterm></indexterm>
</keywords>
</metadata>
</prolog>
<conbody>
<p>An application can use the following functions for creating objects:</p>
<ul>
<li><apiname>C_CreateObject</apiname></li>
<li><apiname>C_GenerateKey</apiname></li>
<li><apiname>C_GenerateKeyPair</apiname></li>
<li><apiname>C_UnwrapKey</apiname></li>
<li><apiname>C_DeriveKey</apiname></li>
</ul>
<p>In addition, an application can create new objects using the <apiname>C_CopyObject</apiname>
function.</p>
<p>To create an object with any of these listed functions, the application must supply an
appropriate template. This template specifies values for valid attributes. An attribute is valid if
it is either one of the attributes described in the <keyword
conref="lxoc_conref.dita#lxoc_conref/pkcs11"/> specification or it is an additional vendor-specific
attribute supported by the library and token. The attribute values supplied by the template,
together with any default attribute values and any attribute values contributed to the object by the
object-creation function itself, must fully define the object to create. </p>
<p rev="shv2">Look at the following code example, where function <apiname>C_CreateObject</apiname>
is used to generate an RSA key, using a template <codeph>keyTempl</codeph> to specify the key
attributes. One of these attributes, CKA_KEY_TYPE, defines the RSA type of the key:</p>
<screen rev="shv2">/*
 * create an RSA key object with C_CreateObject
 */
CK_SESSION_HANDLE hSession;
CK_OBJECT_HANDLE <b>hKey</b>;

CK_OBJECT_CLASS
  dataClass = CKO_DATA,
  certificateClass = CKO_CERTIFICATE,
  keyClass = CKO_PUBLIC_KEY;

CK_KEY_TYPE <b>keyType = CKK_RSA</b>;

CK_ATTRIBUTE <b>keyTemplate[]</b> = {
  {CKA_CLASS, &amp;keyClass, sizeof(keyClass)},
  {<b>CKA_KEY_TYPE, &amp;keyType, sizeof(keyType)</b>},
  {CKA_WRAP, &amp;true, sizeof(true)}, 
  {CKA_MODULUS, modulus, sizeof(modulus)}, 
  {CKA_PUBLIC_EXPONENT, exponent, sizeof(exponent)}
};
CK_RV rc;

rc = <b>C_CreateObject</b>(hSession, <b>keyTemplate</b>, 5, <b>&amp;hKey</b>); 

if (rc != CKR_OK) {
	printf("Error creating key object: 0x%X\n", rc);  return rc;
}

if (rc == CKR_OK) {
      printf("RSA key object creation successful.\n");     
}</screen>

</conbody>
</concept>
<?Pub *0000000808?>
