<?xml version="1.0" encoding="UTF-8"?>
<!--Arbortext, Inc., 1988-2011, v.4002-->
<!DOCTYPE concept PUBLIC "-//IBM//DTD DITA IBM Concept//EN"
 "ibm-concept.dtd">
<?Pub Sty _display FontColor="red"?>
<concept id="lxoc_ock_features" xml:lang="en-us">
<title>Architecture and components of <keyword conref="lxoc_conref.dita#lxoc_conref/ocrypto"
/></title>
<!--SH: Acrolinx run on Apr. 10, 2014, remaining flags cannot be avoided-->
<titlealts>
<navtitle>Architecture and components of <keyword conref="lxoc_conref.dita#lxoc_conref/ocrypto"
/></navtitle>
<searchtitle><ph conref="lxcommon.dita#phrases/lib_title"/>: Architecture and components of <keyword
conref="lxoc_conref.dita#lxoc_conref/ocrypto"/></searchtitle>
</titlealts>
<shortdesc>As implementation of the <keyword conref="lxoc_conref.dita#lxoc_conref/pkcs11"/> API
(<term>Cryptoki</term>), <keyword conref="lxoc_conref.dita#lxoc_conref/ocrypto"/> allows interfacing
with devices (such as a Crypto Express adapter) that hold cryptographic information and perform
cryptographic functions. <keyword conref="lxoc_conref.dita#lxoc_conref/ocrypto"/> provides
application portability by isolating the application from the details of the cryptographic device.
Isolating the application also provides an added level of security because all cryptographic
information stays within the device.</shortdesc>
<prolog>
<metadata>
<keywords>
<indexterm>components of <keyword conref="lxoc_conref.dita#lxoc_conref/ocrypto"/></indexterm>
<indexterm><keyword conref="lxoc_conref.dita#lxoc_conref/ocrypto"/><indexterm>
components</indexterm></indexterm>
<indexterm>slot manager daemon<indexterm>pkcsslotd</indexterm></indexterm>
<indexterm>pkcsslotd<indexterm><indexterm>slot manager
daemon<indexterm/></indexterm></indexterm></indexterm>
</keywords>
</metadata>
</prolog>
<conbody>
<section>
<p><keyword conref="lxoc_conref.dita#lxoc_conref/ocrypto"/> consists of a slot manager and an API
for slot token dynamic link libraries (STDLLs). The slot manager runs as a daemon to control the
number of token slots provided to applications, and it interacts with the tokens (that are used by
the applications) using Unix domain sockets or a shared memory segment. For each device with which a
token should be associated, this token must be defined in a slot in the <keyword
conref="lxoc_conref.dita#lxoc_conref/ocrypto"/> configuration file
(<filepath>/etc/opencryptoki/opencryptoki.conf</filepath>). The shared memory segment allows for
proper sharing of state information between applications to help ensure conformance with the
<keyword conref="lxoc_conref.dita#lxoc_conref/pkcs11"/> specification. </p>
<p><xref href="#lxoc_ock_features/lxoc_arch" format="dita"/> shows the architecture of <keyword
conref="lxoc_conref.dita#lxoc_conref/ocrypto"/>: </p>
<fig id="lxoc_arch" expanse="page"><title><keyword conref="lxoc_conref.dita#lxoc_conref/ocrypto"/>
architecture</title><image href="lxoc_arch.jpg"><alt><keyword
conref="lxoc_conref.dita#lxoc_conref/ocrypto"/> architecture</alt></image></fig>
<p><keyword conref="lxoc_conref.dita#lxoc_conref/ocrypto"/> supports different token types for SW
tokens and for various forms of HW support, for example, IBM Crypto Express adapters. <keyword
conref="lxoc_conref.dita#lxoc_conref/ocrypto"/> allows to manage multiple tokens that can be used in
parallel by one or more processes. These multiple tokens can have the same or
different types.</p>
<p>Users can configure <keyword conref="lxoc_conref.dita#lxoc_conref/ocrypto"/> and in particular,
the set of tokens including their respective token types, using the
<filepath>opencryptoki.conf</filepath> file (see <xref href="lxoc_ock_config_file.dita"/>). They can
define and exploit multiple tokens of any token type, each with a different token name. For multiple
<keyword conref="lxoc_conref.dita#lxoc_conref/ep11tokens"/>, users can configure them using a
token-specific configuration file for each token instance. A sample of such a configuration file is
shown in <xref href="lxoc_tok_common_adding.dita#l31xce00_configuring_ep11tok/lxoc_ep11tok_config"
/>.</p>
<p>Each token uses a unique token directory. This token directory receives the token-individual
information (like for example, key objects, user PIN, SO PIN, or hashes). Thus, the information for
a certain token is separated from all other tokens. For example, for most <keyword
conref="lxoc_conref.dita#lxoc_conref/linux"/> distributions, the <keyword
conref="lxoc_conref.dita#lxoc_conref/ccatoken"/> directory is
<filepath>/var/lib/opencryptoki/ccatok</filepath>. The <keyword
conref="lxoc_conref.dita#lxoc_conref/ccatoken"/> is called <filepath>ccatok</filepath>, if there is
only one instance of a <keyword conref="lxoc_conref.dita#lxoc_conref/ccatoken"/>, and no explicit
name is defined in the <keyword conref="lxoc_conref.dita#lxoc_conref/ocrypto"/> configuration
file.</p>
</section>
<section>
<title>Slots and tokens</title>
<p>Imagine the use of smart cards: In the same way a smart card is inserted into a smart card
reader, a <keyword conref="lxoc_conref.dita#lxoc_conref/pkcs11"/> token is inserted into a <keyword
conref="lxoc_conref.dita#lxoc_conref/pkcs11"/> slot, where a slot is identified by its ID. A token
is library code that knows how to interface with the cryptographic hardware. However, there is no
requirement for the token to use any hardware at all, and accordingly there is a so called soft
token (described in <xref href="lxoc_tok_soft.dita"/>) which represents a pure software library
accessible via <keyword conref="lxoc_conref.dita#lxoc_conref/ocrypto"/>. </p>
<p>Each token is of a certain token-type, where a token-type is implemented by STDLLs. For example,
all <keyword conref="lxoc_conref.dita#lxoc_conref/ep11tokens"/> use the libpkcs11_ep11.so STDLL (see
also <xref href="lxoc_ock_config_file.dita#lxoc_ock_config_file/lxce_ock_config_sample"/>). A
certain instance of a token is implemented by data structures allocated by an STDLL (and a token
directory). </p>
<p>All tokens available to <keyword conref="lxoc_conref.dita#lxoc_conref/ocrypto"/> are configured
in the <filepath>opencryptoki.conf</filepath> configuration file. Each token configuration in
<filepath>opencryptoki.conf</filepath> defines the token type of the token by specifying the
adequate STDLL. The <filepath>opencryptoki.conf</filepath> configuration file is used by all
processes (applications) using (linking to) <keyword conref="lxoc_conref.dita#lxoc_conref/ocrypto"
/>. Each process may call some or all tokens defined in <filepath>opencryptoki.conf</filepath>.</p>
<p>The <keyword conref="lxoc_conref.dita#lxoc_conref/pkcs11"/> API provides a set of slot and token
management functions. For example:</p>
<ul>
<li><apiname>C_GetSlotList()</apiname> gets a list of available slots.</li>
<li><apiname>C_GetSlotInfo()</apiname> obtains information on each slot (for example, whether a
token is present, or whether the token represents a removable device).</li>
<li><apiname>C_InitToken()</apiname> initializes an inserted token.</li>
<li><apiname> C_GetTokenInfo()</apiname> provides information on such a token (for example, whether
a login is required to use the token, a count of failed log-ins, information on whether the token
has a random number generator).</li>
<li><apiname>C_InitPIN()</apiname> and <apiname>C_SetPIN()</apiname> manage the PIN used to protect
a token from unauthorized access. </li>
</ul>
<p>View an example for how to obtain slot information using the <apiname>C_GetSlotInfo()</apiname>
function:</p>
<screen>
CK_RV getSlotInfo(CK_SLOT_ID slotID, CK_SLOT_INFO_PTR slotInfo);

/*  typedef struct CK_SLOT_INFO {       */
/*  CK_UTF8CHAR slotDescription[64];    */
/*  CK_UTF8CHAR manufacturerID[32];     */
/*  CK_FLAGS flags;                     */
/*  CK_VERSION hardwareVersion;         */
/*  CK_VERSION firmwareVersion;         */
/*  } CK_SLOT_INFO*/;                   */

/* Flags:                      */              
/* CKF_TOKEN_PRESENT           */
/* CKF_REMOVABLE_DEVICE        */
/* CKF_HW_SLOT                 */ 

(
       rc = C_GetSlotInfo(slotID, &amp;slotInfo);
       if (rc != CKR_OK) {
          printf("Error getting slot information: %x \n", rc);
          return rc;
       }
       
       if ((slotInfo.flags &amp; CKF_TOKEN_PRESENT) == CKF_TOKEN_PRESENT) 
           printf("A token is present in the slot.\n");
       
       if ((slotInfo.flags &amp; CKF_REMOVABLE_DEVICE) == CKF_REMOVABLE_DEVICE) 
          printf("The reader supports removable devices.\n");
       
       if ((slotInfo.flags &amp; CKF_HW_SLOT) == CKF_HW_SLOT)
          printf("The slot is a hardware slot.\n");   /* opposed to a SW slot implementing a soft token  */
             
    return CKR_OK;
 }</screen>
</section>
<section>
<title>Slot manager</title>
<p>The slot manager daemon (<cmdname>pkcsslotd</cmdname>) manages slots (and therefore tokens) in
the system. Its main task is to coordinate token accesses from multiple processes. A fixed number of
processes can attach themselves implicitly to <cmdname>pkcsslotd</cmdname> during <keyword
conref="lxoc_conref.dita#lxoc_conref/ocrypto"/> initialization, so a static table in shared memory
is used. The current limit of the table is 1000 processes using the subsystem. The daemon sets up
this shared memory upon initialization and acts as a garbage collector thereafter, helping to ensure
that only active processes remain registered. </p>
<p>The shared memory segments for the available tokens are located in path
<filepath>/dev/shm</filepath> and are named either by their default names or by the name defined in
the  <filepath>opencryptoki.conf</filepath> file. For example, the shared memory segments may be
located and named as shown in the following example:</p>
<screen>
[root@system01 shm]# pwd
/dev/shm
[root@system01 shm]# ls -l
...
-rw-rw-rw-. 1 root root 82792 Apr  8 12:04 usr.local.var.lib.opencryptoki.ccatok
-rw-rw-rw-. 1 root root 82792 Apr  8 12:04 usr.local.var.lib.opencryptoki.ep11tok
-rw-rw-rw-. 1 root root 82792 Apr  8 12:04 usr.local.var.lib.opencryptoki.lite /* legacy name of ICA Tok */
-rw-rw-rw-. 1 root root 82792 Apr  8 12:04 usr.local.var.lib.opencryptoki.swtok
...</screen>
<p>The slot manager also maintains Unix domain sockets between all <keyword
conref="lxoc_conref.dita#lxoc_conref/ocrypto"/> processes (API layer). There are the following
sockets:<codeblock>
<filepath>/var/run/pkcsslotd.socket</filepath>
<filepath>/var/run/pkcsslotd.admin.socket</filepath></codeblock></p> <p>When a process attaches to a slot and opens a session, <cmdname>pkcsslotd</cmdname> makes future
processes aware that a process has a session open and locks out certain function calls, if the
process needs exclusive access to the given token. The daemon constantly searches through its shared
memory and ensures that when a process is attached to a token, this process is actually running. If
an attached process terminates abnormally, <cmdname>pkcsslotd</cmdname> cleans up after the process
and frees the slot for use by other processes.</p>
<p> Start the slot manager with the commands shown in <xref
href="lxoc_ock_pkcsconf.dita#ep11_stackoverview/start_slotd"/>.</p>
</section>
<section>
<title>Main API</title>
<p>The main API for the STDLLs lies in <filepath>/usr/lib/pkcs11/PKCS11_API.so</filepath>. This API
includes all the functions as outlined in the <xref
href="https://docs.oasis-open.org/pkcs11/pkcs11-base/v3.0/os/pkcs11-base-v3.0-os.html#_Toc29976593"
format="html" scope="external"><keyword conref="lxoc_conref.dita#lxoc_conref/pkcs11"/> API
specification</xref>. The main API provides each application with the slot management facility. The
API also loads token specific modules (STDLLs) that provide the contained operations (cryptographic
operations and session and object management). STDLLs are customized for each token type and have
specific functions, such as an initialization routine, to allow the token to work with the slot
manager. When an application initializes the subsystem with the <apiname>C_Initialize</apiname>
call, the API loads the STDLL shared objects for all the tokens that exist in the configuration
(residing in the shared memory) and invokes the token specific initialization routines. In addition,
a connection to the <cmdname>pkcsslotd</cmdname> slot manager and its shared memory segment is
established.</p>
</section>
<section id="roles">
<title>Roles and Sessions</title>
<p><keyword conref="lxoc_conref.dita#lxoc_conref/pkcs11"/> knows two different roles per token. Each
role can authenticate itself by a PIN specific to that role and a token.</p>
<ul>
<li><b>The (normal) User</b> can login to sessions, create and access private objects and perform
cryptographic operations.</li>
<li><b>The security officer (SO)</b> initializes and manages the token and can set the PIN of the
<b><i>User</i></b>.</li>
</ul>
<p>A session is a token specific context for one or more cryptographic operations. It maintains the
intermediate state of multi-part functions, like an encryption of a message that is worked on one
network packet at a time. Roughly speaking, within one session only one cryptographic operation can
be processed at a time, but a program may open multiple sessions concurrently. </p>
<p>There are different types of sessions: Each session is either a read-only session or a read-write
session and each session is either a public session or a <b><i>User</i></b> session. Read-only
sessions may not create or modify objects. A public session can only access public objects whereas a
<b><i>User</i></b> session can access the <b><i>User's</i></b> private objects. All sessions of a
token become <b><i>User</i></b> sessions after a login to one of the sessions of that token. 
Access to a specific token is controlled using PINs (<b><i>User</i></b> or <b>security officer</b> PINs).
</p>
<p>The <keyword conref="lxoc_conref.dita#lxoc_conref/pkcs11"/> API provides session functions
like:</p>
<ul>
<li><apiname>C_OpenSession()</apiname> and <apiname>C_CloseSession()</apiname> are used to open and
close a session.</li>
<li><apiname>C_GetSessionInfo()</apiname> provides information on the type of a session.</li>
<li><apiname>C_GetOperationState()</apiname> and <apiname>C_SetOperationState()</apiname> are used
to checkpoint and restart a multi-part cryptographic operation.</li>
<li><apiname>C_Login()</apiname> and <apiname>C_Logout()</apiname> are used to toggle sessions from
public to <b><i>User</i></b> sessions and reverse. In order to login, the <b><i>User</i></b> PIN is
required. </li>
</ul>
</section>
<section>
<title>Functions and mechanisms</title>
<p>The <keyword conref="lxoc_conref.dita#lxoc_conref/pkcs11"/> API defines a small set of generic
cryptographic functions to do the following tasks: </p>
<ul>
<li>encrypting and decrypting messages,</li>
<li>computing digests (also called <term>hashes</term>) of messages,</li>
<li>signing messages and verifying signatures,</li>
<li>generating symmetric keys or asymmetric key pairs and deriving keys,</li>
<li>wrapping and unwrapping keys,</li>
<li> generating random numbers.</li>
</ul>
<p>With the exception of the functions to generate random numbers, these generic cryptographic
functions accept a mechanism parameter that defines the specific instance of that function. This is
depicted in <xref href="#lxoc_ock_features/lxoc_arch_machanism" format="dita">Figure 2</xref> where
an encryption function takes an AES_CBC mechanism as argument to encrypt a message with AES
encryption in the cipher block chaining (CBC) mode of operation, using a key (and an initialization
vector not shown in the figure). </p>
<fig id="lxoc_arch_machanism" expanse="column"><title>Functions and mechanisms</title><image
href="lxoc_arch_mechanism.jpg">
<alt>Functions and mechanisms</alt></image></fig>
<p>Each cryptographic function is executed in the context of a session. Most cryptographic functions
must be initialized by calling an initialization function that takes a session parameter, a
mechanism parameter and function specific parameters like keys. For a cryptographic function
<apiname>Xyz</apiname> the initialization function is called <apiname>C_XyzInit()</apiname>. Once a
function is initialized, the actual function invocation can take place: either as a single part
function of the form <apiname>C_Xyz()</apiname> or as a multi-part function where one or more calls
to a function of the form <apiname>C_XyzUpdate()</apiname> are finalized by a call to
<apiname>C_XyzFinal()</apiname>. </p>
<p> It is token specific which functions are supported by a token. The <keyword
conref="lxoc_conref.dita#lxoc_conref/pkcs11"/> API provides the function C_GetFunctionList() to
obtain the functions available with a specific token. A mechanism describes a specific set of
cryptographic operations. For example, the mechanism <codeph>CKM_AES_CBC</codeph> refers to AES
encryption with the cipher block chaining (CBC) mode of operation. A mechanism may be required for
performing one or more cryptographic functions, for example, the <codeph>CKM_AES_CBC</codeph>
mechanism may be used to define encryption, decryption, wrapping and unwrapping functions whereas
the mechanism <codeph>CKM_ECDSA_KEY_PAIR_GEN</codeph> which is a mechanism to generate keys for
elliptic curve DSA signatures, only supports the key (pair) generation function. </p>
<p>The list of mechanisms supported depends on the tokens and can be queried using the
<apiname>C_GetMechanismList()</apiname> function. Each mechanisms has token specific attributes like
the set of supported functions, minimal and maximal supported key sizes, or a hardware support flag.
These attributes are token specific and can be queried with <apiname>C_GetMechanismInfo()</apiname>.
Some mechanisms have mechanism parameters, for example, <codeph>CKM_AES_CBC</codeph> has a mechanism
parameter to define the initialization vector (IV) required by the CBC mode of operation. </p>
</section><section>
<title>Slot token dynamic link libraries (STDLLs)</title>
<p>STDLLs are plug-in modules to the main API. They provide token-specific functions beyond the main
API functions. Specific devices can be supported by building an STDLL for the device. Each STDLL
must provide at least a token-type specific initialization function. If the device is an intelligent
device, such as a hardware adapter that supports multiple mechanisms, the STDLL can be thin because
much of the session information can be stored on the device. If the device only performs a simple
cryptographic function, all of the objects and the device status must be managed by the STDLL. This
flexibility allows STDLLs to support any cryptographic device. </p>
</section>
<section>
<title>Shared memory</title>
<p>The slot manager sets up its database in a region of shared memory. Since the maximum number of
processes allowed to attach to <cmdname>pkcsslotd</cmdname> is finite, a fixed amount of memory can
be set aside for token management. This fixed memory allocation for token management allows
applications easier access to token state information and helps ensure conformance with the <keyword
conref="lxoc_conref.dita#lxoc_conref/pkcs11"/> specification. In addition, the  slot manager
(<cmdname>pkcsslotd</cmdname>) communicates with the API layer using Unix domain sockets.</p>
<p>Also, each token sets up a shared memory segment to synchronize token objects across multiple
processes using the token.</p>
</section>
<section>
<title>Objects and keys</title>
<p props="shv2"><keyword conref="lxoc_conref.dita#lxoc_conref/ocrypto"/> provides various functions
to generate the applicable types of objects, for example, certain types of keys. </p>
<p props="shv2">In addition, there is a function called  for recognizes a number of classes of
objects, as defined in the CK_OBJECT_CLASS data type. Object classes are defined with the objects
that use them. Typically, objects are generated by function calls that specify an appropriate
mechanism used for the generation. In addition, there is a function <b>C_CreateObject</b> to create
objects that are defined by input templates containing appropriate attributes. For example, data
objects are defined by a data template <apiname>CK_ATTRIBUTE dataTemplate[]</apiname>, or
certificate objects are defined by a certificate template <apiname>CK_ATTRIBUTE
certificateTemplate[]</apiname>.</p>
<p rev="shv2"> An object furthermore consists of a set of attributes, each of which has  precisely
one given value. For an example, you can have a look at Step 6 of the <xref
href="lxoc_usecases_sampleprog.dita"/>, where function <apiname>C_GenerateKeyPair()</apiname> uses
the mechanism CKM_RSA_PKCS_KEY_PAIR_GEN to create an RSA private and public key pair. The attributes
are assigned to the keys with two different templates of type CK_ATTRIBUTE (one applicable for the
private key and one applicable to the public key), which are input to the function call.</p>
<p><keyword conref="lxoc_conref.dita#lxoc_conref/pkcs11"/> objects belong to different orthogonal
classes depending on their life span, access restrictions and modifiability: </p>
<ul>
<li>Session objects exist during the duration of a session whereas token objects are associated with
a token and not with any running code.</li>
<li>Private objects can only be accessed by the <keyword
conref="lxoc_conref.dita#lxoc_conref/pkcs11"/>
<b><i>Users</i></b> if they have logged into the token, whereas public objects can always be
accessed by both <b><i>User</i></b> and <b><i>security officer</i></b>.</li>
<li>Read-only objects cannot be modified whereas read-write objects can.</li>
</ul>
<p>In addition, each object has a set of attributes, especially the CKA_CLASS attribute, which
determines which further attributes are associated with an object. Other typical attributes contain
the value of an object or determine whether an object is a token object. </p>
<p>The <keyword conref="lxoc_conref.dita#lxoc_conref/pkcs11"/> API provides a set of functions to
manage objects, like for example, <apiname>C_CreateObject()</apiname>,
<apiname>C_CopyObject()</apiname>, <apiname>C_DestroyObject()</apiname>,
<apiname>C_GetObjectSize()</apiname>, <apiname>C_GetAttributeValue()</apiname>,
<apiname>C_SetAttributeValue()</apiname>, <apiname>C_FindObjects()</apiname>. </p>
<note>Token objects are stored in a token specific object store, the token directory (see also <xref
href="lxoc_tok_all_dir.dita"/>).</note>
<p> The most important object classes are those that implement keys: private keys (CKO_PRIVATE_KEY),
public keys (CKO_PUBLIC_KEY) and secret keys (CKO_SECRET_KEY). Private and public keys are the
members of an asymmetric key pair, whereas secret keys are symmetric keys or MAC keys.</p>
<p> There are many key specific attributes. For example, the Boolean attribute CKA_WRAP denotes
whether a key may be used to wrap another key. The Boolean attribute CKA_SENSITIVE is only
applicable for private and secret keys. If this attribute is TRUE, this means that the value of the
key may never be revealed in clear text. There are key-type specific attributes
like  CKA_MODULUS, which is an attribute specific to RSA keys. Not all tokens support all key
types with all possible attributes. CKA_PRIVATE causes the object data to be encrypted when stored
in the token directory.</p>
<p>Object management functions to create keys are <apiname>C_GenerateKey()</apiname>,
<apiname>C_GenerateKeyPair()</apiname> and <apiname>C_DeriveKey()</apiname>. To import a key not
generated by one of the three previously mentioned functions, you can use
<apiname>C_CreateObject()</apiname> with all key specific attributes defined. Alternatively, a
wrapped key can be imported with <apiname>C_Unwrap()</apiname>, where a wrapped key is a standard
representation of a key specific to the key type (for example, a byte array for secret keys or a BER
encoding for other key types) that is encrypted by a wrapping key. </p>
<p rev="shv2"><keyword conref="lxoc_conref.dita#lxoc_conref/ocrypto"/> defines multiple  object
classes, for example:</p>
<ul rev="shv2">
<li>Data objects</li>
<li>Key objects</li>
<li>Public key objects</li>
<li>Private key objects</li>
<li>Secret key objects</li>
<li>Mechanism objects</li>
</ul>
<p rev="shv2">Each object class has its own set of attributes, where these attributes define an
instance of an object from this class. There is one common attribute called CKA_CLASS for all object
classes. This attribute defines the type (or class) of an object. For more information about
objects, read <xref href="lxoc_usecases_objects.dita"/> and  <xref
href="lxoc_usecases_attributes.dita"/>).</p>
<p rev="shv2">When an object is created or found on a token by an application, <keyword
conref="lxoc_conref.dita#lxoc_conref/ocrypto"/> assigns it an object handle for that application’s
sessions to access it (CK_OBJECT_HANDLE, CK_OBJECT_HANDLE_PTR). </p>
<p><keyword conref="lxoc_conref.dita#lxoc_conref/pkcs11"/> also defines objects for certificates.
However no functions to operate on certificates are part of the <keyword
conref="lxoc_conref.dita#lxoc_conref/pkcs11"/> API. </p>
</section>
<section>
<title>Access control and groups</title>
<p>To properly configure the system, and to be authorized for performing the <keyword
conref="lxoc_conref.dita#lxoc_conref/ocrypto"/> processes, for example, running the slot manager
daemon <cmdname>pkcsslotd</cmdname>, the <term>pkcs11</term> group must be defined in
<filepath>/etc/group</filepath> of the system. Every user of <keyword
conref="lxoc_conref.dita#lxoc_conref/ocrypto"/> (including the users configuring <keyword
conref="lxoc_conref.dita#lxoc_conref/ocrypto"/> and its tokens) must be a member of this
<term>pkcs11</term> group. Use standard <keyword conref="lxoc_conref.dita#lxoc_conref/linux"/>
management operations to create the <term>pkcs11</term> group if needed, and to add users to this
group as required. You may also refer to the man page of <keyword
conref="lxoc_conref.dita#lxoc_conref/ocrypto"/> (<cmdname>man openCryptoki</cmdname>) which has a
SECURITY NOTE section that is important from the security perspective.</p>
</section>
<section>
<title>Logging and tracing in <keyword conref="lxoc_conref.dita#lxoc_conref/ocrypto"/></title>
<p>You can enable logging support by setting the environment variable
<codeph>OPENCRYPTOKI_TRACE_LEVEL</codeph>. If the environment variable is not set, logging is
disabled by default.</p>
<table id="ep11_table_log"><title><keyword conref="lxoc_conref.dita#lxoc_conref/ocrypto"/> log
levels</title><desc>
<p outputclass="summary" platform="">Table with two columns.</p>
</desc><tgroup cols="2">
<colspec colname="col1" colwidth="1*"/>
<colspec colname="col2" colwidth="5*"/>
<thead>
<row>
<entry>Log level</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry>0</entry>
<entry>Trace off.</entry>
</row>
<row>
<entry>1</entry>
<entry>Log error messages.</entry>
</row>
<row>
<entry>2</entry>
<entry>Log warning messages.</entry>
</row>
<row>
<entry>3</entry>
<entry>Log informational messages.</entry>
</row>
<row>
<entry>4</entry>
<entry>Log development debug messages. These messages may help debug while developing <keyword
conref="lxoc_conref.dita#lxoc_conref/ocrypto"/> applications.</entry>
</row>
<row>
<entry>5</entry>
<entry>Log debug messages that are useful to<keyword conref="lxoc_conref.dita#lxoc_conref/app_devs"
/> . This level must be enabled via option <codeph>--enable-debug</codeph> in the
<cmdname>configure</cmdname> script at build time.</entry>
</row>
</tbody>
</tgroup></table>
<p>If a log level > 0 is defined in the environment variable
<codeph>OPENCRYPTOKI_TRACE_LEVEL</codeph>, then log entries are written to file
<codeph>/var/log/opencryptoki/trace.&lt;pid&gt;</codeph>. In this file name specification,
<codeph>&lt;pid&gt;</codeph> denotes the ID of the running process that uses the current token.</p>
<p>The log file is created with ownership <term>user</term>, and group <term>pkcs11</term>, and
permission 0640 (user: read, write; group: read only; others: nothing). For
every application, which is using <keyword conref="lxoc_conref.dita#lxoc_conref/ocrypto"/>, a new
log file is created during token initialization.</p>
<p>A log level > 3 is only recommended for developers.</p>
</section>
<section>
<title>Lock files</title>
<p>As of release 3.8, <keyword conref="lxoc_conref.dita#lxoc_conref/ocrypto"/> maintains the
following lock files in the system: one global API lock file, one lock file per token instance,
except for the <keyword conref="lxoc_conref.dita#lxoc_conref/tpmtoken"/>. For the <keyword
conref="lxoc_conref.dita#lxoc_conref/tpmtoken"/>, <keyword
conref="lxoc_conref.dita#lxoc_conref/ocrypto"/> keeps one lock file per user.</p>
<p>The lock files are stored in the following directories, if applicable:</p>
<screen># ls -lh /var/lock/opencryptoki/

LCK..APIlock
ccatok/LCK..ccatok
ep11tok/LCK..ep11tok
icsf/LCK..icsf
lite/LCK..lite
swtok/LCK..swtok
tpm/&lt;USER>/LCK..tpm
</screen>
<p>The <filepath>LCK..APIlock</filepath> file serializes access to the shared memory from the
<cmdname>pkcsslotd</cmdname> daemon and from the API calls issued from
<filepath>libopencryptoki.so</filepath>.</p>
<p>The token-specific lock files serialize access to the shared memory from the respective token
library (for example, from <filepath>libpkcs11_cca.so</filepath> for the <keyword
conref="lxoc_conref.dita#lxoc_conref/ccatoken"/>).</p>
<p>Thus, each lock file is used to protect the respective shared memory segments by letting threads
busily waiting for a required spinlock.</p>
</section>
<section>
<title>Use and purpose of <keyword conref="lxoc_conref.dita#lxoc_conref/ocrypto"/> features</title>
<p>In normal operation, the mentioned shared memory segments, the Unix domain sockets of the slot
manager daemon (<cmdname>pkcsslotd</cmdname>), and the lock files should be transparent to users of
<keyword conref="lxoc_conref.dita#lxoc_conref/ocrypto"/>. But in case of certain errors, such
objects may remain from some previous use of <keyword conref="lxoc_conref.dita#lxoc_conref/ocrypto"
/> and thus block new operations. In such cases, you need to know the locations of these objects and
you must typically use certain operating system tools to remove them and enable a normal use of
<keyword conref="lxoc_conref.dita#lxoc_conref/ocrypto"/> again.</p>
<p>For further information on <keyword conref="lxoc_conref.dita#lxoc_conref/ocrypto"/> system
resources, read <xref
href="https://github.com/opencryptoki/opencryptoki/blob/master/doc/system_resources" format="html"
scope="external"><codeph>https://github.com/opencryptoki/opencryptoki/blob/master/doc/system_resources</codeph></xref></p>
</section>
<section>
<p><xref href="#lxoc_ock_features/stack_process_flow" format="dita"/> shows the process
flow within the <ph conref="lxcommon.dita#phrases/ph_loz_and_lone"/> crypto stack. For example, an
application sends an encryption request to the crypto adapter. Through various interfaces, such a
request is propagated from the application layer down to the target crypto adapter. On its way down,
the request passes through the involved layers: the standard <keyword
conref="lxoc_conref.dita#lxoc_conref/ocrypto"/> interfaces, the adequate <ph
conref="lxcommon.dita#phrases/ph_ibmz"/> crypto libraries, and the operating system kernel. The
<apiname>zcrypt</apiname> device driver finally sends the request to the appropriate<keyword
conref="lxoc_conref.dita#lxoc_conref/cryptocoproc"/> . The resulting request output is sent back to
the application just the other way round through the layer interfaces.</p>
<fig id="stack_process_flow" expanse="page">
<title><ph conref="lxcommon.dita#phrases/ph_loz_and_lone"/> crypto stack</title>
<image href="lxoc_overviewoci.jpg" placement="break" width="600">
<alt>Flow diagram of the <ph conref="lxcommon.dita#phrases/ph_loz_and_lone"/> stack process</alt>
</image>
</fig>
</section>
</conbody>
</concept>
<?Pub *0000003393?>
