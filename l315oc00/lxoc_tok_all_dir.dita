<?xml version="1.0" encoding="UTF-8"?>
<!--Arbortext, Inc., 1988-2011, v.4002-->
<!DOCTYPE concept PUBLIC "-//IBM//DTD DITA IBM Concept//EN"
 "ibm-concept.dtd">
<?Pub Sty _display FontColor="red"?>
<concept id="lxoc_ica_token" xml:lang="en-us">
<title>Directory content for <keyword conref="lxoc_conref.dita#lxoc_conref/cca"/>, <keyword
conref="lxoc_conref.dita#lxoc_conref/ica"/>, <keyword conref="lxoc_conref.dita#lxoc_conref/ep11"/>,
and Soft tokens</title>
<!--SH: Acrolinx run on Apr. 10, 2014, remaining flags cannot be avoided-->
<titlealts>
<navtitle>Token directories</navtitle>
<searchtitle><ph conref="lxcommon.dita#phrases/lib_title"/> and <keyword
conref="lxoc_conref.dita#lxoc_conref/ocrypto"/>: Token directory content</searchtitle>
</titlealts>
<shortdesc>Each token uses a unique token directory. This token directory stores the token-specific
objects (like for example, key objects, user PIN, SO PIN, or hashes). Thus, the information for a
certain token is separated from all other tokens. Read the information about the format of data and
objects stored in these directories. <keyword conref="lxoc_conref.dita#lxoc_conref/ocrypto"/> users
may need this information for example, when working with containerized applications.</shortdesc>
<prolog>
<metadata>
<keywords>
<indexterm>directory content <indexterm><keyword conref="lxoc_conref.dita#lxoc_conref/ccatoken"
/></indexterm>
<indexterm><keyword conref="lxoc_conref.dita#lxoc_conref/ep11token"/></indexterm>
<indexterm><keyword conref="lxoc_conref.dita#lxoc_conref/softtoken"/></indexterm>
<indexterm><keyword conref="lxoc_conref.dita#lxoc_conref/libicatoken"/></indexterm>
</indexterm>
<indexterm><keyword conref="lxoc_conref.dita#lxoc_conref/ccatoken"/><indexterm>directory
content</indexterm></indexterm>
<indexterm><keyword conref="lxoc_conref.dita#lxoc_conref/ep11token"/><indexterm>directory
content</indexterm></indexterm>
<indexterm><keyword conref="lxoc_conref.dita#lxoc_conref/softtoken"/><indexterm>directory
content</indexterm></indexterm>
<indexterm><keyword conref="lxoc_conref.dita#lxoc_conref/libicatoken"/><indexterm>directory
content</indexterm></indexterm>
<indexterm>NVTOK.DAT</indexterm>
</keywords>
</metadata>
</prolog>
<conbody>
<section>
<p>As of <keyword conref="lxoc_conref.dita#lxoc_conref/ocrypto"/> version 3.16, <keyword
conref="lxoc_conref.dita#lxoc_conref/cca"/>, <keyword conref="lxoc_conref.dita#lxoc_conref/ica"/>,
<keyword conref="lxoc_conref.dita#lxoc_conref/ep11"/>, and Soft tokens have the same structure and
content within their directories. </p>
<p>The path name of the token directories is derived from either the token default name or by the
token name as defined in the <filepath>opencryptoki.conf</filepath> file. The location of the token
directories may look similar to the shown examples:</p>
<p>
<screen>[root@t3545033 opencryptoki]# pwd
/usr/local/var/lib/opencryptoki
[root@t3545033 opencryptoki]# ls -l
total 24
drwxrwx---. 3 root pkcs11 4096 Mar 19 11:47 ccatok
drwxrwx---. 3 root pkcs11 4096 Mar 19 12:35 ep11tok
drwxrwx---. 3 root pkcs11 4096 Mar 19 11:47 lite     /* legacy name of ICA Tok */
drwxrwx---. 3 root pkcs11 4096 Mar 19 11:47 swtok</screen>
</p>
</section>
<section>
<note>With <keyword conref="lxoc_conref.dita#lxoc_conref/ocrypto"/>, you can select from two data
store formats: <ul>
<li>Before <keyword conref="lxoc_conref.dita#lxoc_conref/ocrypto"/> version 3.12, there is only the
one NVTOK.DAT format (the old format).</li>
<li>Starting with <keyword conref="lxoc_conref.dita#lxoc_conref/ocrypto"/> version 3.12, you can
choose to use a FIPS compliant data format. Being FIPS compliant, the token data is stored in a
format that is better protected against attacks than the previously used data format.</li>
</ul></note>
<p>If you want to use the token data format that was generated with FIPS compliant operations, you
must explicitly specify the <codeph>tokversion</codeph> option for the token's slot entry in the
<keyword conref="lxoc_conref.dita#lxoc_conref/ocrypto"/> configuration file. You must do this before
token initialization with the <cmdname>pkcsconf</cmdname> command, for example: <fig
expanse="column" id="tokversion">
<title>Slot entry for an <keyword conref="lxoc_conref.dita#lxoc_conref/ep11token"/> with FIPS
compliant data format in the opencryptoki.conf file</title>
<screen>
slot 4
{
stdll = libpkcs11_ep11.so
confname = ep11tok01.conf
tokname = ep11token01 
<b>tokversion = 3.12</b>
description = "Ep11 Token"
manufacturer = "IBM"
hwversion = "4.11"
firmwareversion = "2.0"
}</screen>
</fig></p>
<p>You can use the <cmdname>pkcstok_migrate</cmdname> utility to transform an <keyword
conref="lxoc_conref.dita#lxoc_conref/ep11token"/>, a <keyword
conref="lxoc_conref.dita#lxoc_conref/ccatoken"/>, an <keyword
conref="lxoc_conref.dita#lxoc_conref/libicatoken"/>, or a <keyword
conref="lxoc_conref.dita#lxoc_conref/softtoken"/> created with any version of <keyword
conref="lxoc_conref.dita#lxoc_conref/ocrypto"/> into a data format that was generated by FIPS
compliant operations. For more information, read <xref href="lxoc_tool_pkcstok_migrate.dita"/>.</p>
<p>There are two objects derived from both a token’s user PIN and a token’s SO PIN:</p>
<ul>
<li> a non-secret password hash which is checked at login</li>
<li> and a secret key encryption key (KEK) which is used to wrap the token’s master key (SO KEK or a
user KEK, respectively).</li>
</ul>
<p>Therefore, the token’s master key is stored on disk twice: </p>
<ul>
<li>The <filepath>MK_SO</filepath> file holds the master key wrapped with the SO KEK.</li>
<li>The <filepath>MK_USER</filepath> file holds the master key wrapped with the user KEK. </li>
</ul>
<p> So both user and SO can access the master key. The password-based key derivation function
<apiname>PBKDF2</apiname> is used to derive those four objects. An iteration count of 100000 is used
with a salt consisting of different <term>purpose strings</term> for each of the four derivations
and a random part. Iteration count, purpose strings, and the random parts are non-secret and can be
stored on disk with the other non-volatile token data in <filepath>NVTOK.DAT</filepath>, together
with the corresponding data. The two password hashes are non-secret and can also be stored
unencrypted in <filepath>NVTOK.DAT</filepath>. </p>
<p>The two key-encryption keys (KEKs) are secret and cannot be stored with a token’s non-volatile
token data: They must be (re-)derived when needed and are cached on the stack for an application’s
lifetime. </p>
<p>All following structures are C pseudo code, used to describe data structures at byte level. </p>
<p><b>The old <filepath>NVTOK.DAT</filepath> format</b> (still valid)</p>
<codeblock>
struct TOKEN_DATA {
CK_TOKEN_INFO info;
u8 user_pin_sha1 [24];
u8 so_pin_sha1 [24];
u8 next_token_obj_name[8];
u32 allow_weak_des;
u32 check_des_parity;
u32 allow_key_mods;
u32 netscape_mods;
};
</codeblock>
<p><b>The new <filepath>NVTOK.DAT</filepath> format</b></p>
<note>The new <filepath>NVTOK.DAT</filepath> is available starting with <keyword
conref="lxoc_conref.dita#lxoc_conref/ocrypto"/> version 3.12 and is valid in parallel with the old
format.</note>
<codeblock>
struct TOKEN_DATA {
/* --- old format for compat --- */
CK_TOKEN_INFO info;
u8 user_pin_sha1 [24];
u8 so_pin_sha1 [24];
u8 next_token_obj_name[8];
u32 allow_weak_des;
u32 check_des_parity;
u32 allow_key_mods;
u32 netscape_mods;
/* --- 3.12 additions start here --- */
u32 version; /* tokversion major&lt;&lt;16|minor */
/* --- PBKDF2 --- 
 * 64b salts are 32b purpose string concat 32b random */
/* SO PW hash (login) */
u64 so_login_it;
u8 so_login_salt[64];
u8 so_login_key[32];
/* User PW hash (login) */
u64 user_login_it;
u8 user_login_salt[64];
u8 user_login_key[32];
/* SO MK KEK (wrap) */
u64 so_wrap_it;
u8 so_wrap_salt[64];
/* User MK KEK (wrap) */
u64 user_wrap_it;
u8 user_wrap_salt[64];
};
</codeblock>
</section>
<section>
<title>Changes from old to new data store format</title>
<p>In the old format, the multiple-byte-width data types were not serialized before stored to disk,
so <filepath>NVTOK_DAT</filepath> could not be used on little endian (LE) and big endian (BE)
platforms. The new format serializes those data types from host to BE byte order. The <term>AES Key
Wrap</term> algorithm is used to wrap a token’s master key (MK) with the KEKs. The token’s master
key is randomly generated at token initialization. In the old format, the master key was a 3DES CBC
key. The KEK was a 2TDEA CBC key. CBC was used with a per token (fixed) initialization vector (IV).
Integrity was intended to be provided by a SHA1 hash of the unencrypted key. The MK master key
object had the following format: </p>
<codeblock>
struct MK {
u8 MK [24];
u8 sha1 [20];
u8 padding[4];
};
</codeblock>
<p>It was wrapped by the SO KEK and stored to <filepath>MK_SO</filepath> and was also wrapped by the
user KEK and stored to <filepath>MK_USER</filepath>. The new format defines the MK to be an AES-256
key. Its unencrypted format is just the 32 key bytes. Its encrypted format is a 40 byte key blob
output by the <term>AES Key Wrap</term> algorithm (wrapped with the SO or user KEK). The file names
<filepath>MK_SO</filepath> and <filepath>MK_USER</filepath> are unchanged.</p>
<p>The old format stored non-private token objects unencrypted in the following format:</p>
<codeblock>
struct OBJECT_PUB {
u32 total_len;
u8 private_flag;
u8 object[object_len];
};
</codeblock>
<p>The new format is:</p>
<codeblock>
struct OBJECT_PUB {
//--------------        &lt;--+
u32 tokversion;            | 16-byte header
u8 private_flag;           |
u8 reserved[7];            |
u32 object_len;            |
//--------------        &lt;--+
u8 object[object_len];     | body
//--------------        &lt;--+
};
</codeblock>
<p>The old format encrypted all private token objects under the MK. The unencrypted format was:</p>
<codeblock>
struct OBJECT_PRIV {
u32 total_len;
u8 private_flag;
//--- enc ---
u32 object_len;
u8 object[object_len];
u8 sha1[20];
u8 padding[padding_len];
};
</codeblock>
<p>The new format features authenticated encryption via AES-256-GCM. To avoid initialization vector
(IV) uniqueness , instead of using the MK to encrypt all token objects, the MK is used to wrap a
per-object key using the <term>AES Key Wrap</term> algorithm. The wrapped per-object key is stored
together with the IV and other meta-data as AAD in the authenticated object header. The 16 byte GMAC
tag is appended to the authenticated and encrypted object body which holds the private token
object’s data:</p>
<codeblock>
struct OBJECT_PRIV {
u32 total_len;
//- auth -------        &lt;--+
u32 tokversion;            | 64-byte header
u8 private_flag;           |
u8 reserved[3];            |
u8 key_wrapped[40];        |
u8 iv[12];                 |
u32 object_len;            |
//- auth+enc ---        &lt;--+
u8 object[object_len];     | body
//--------------        &lt;--+
u8 tag[16];                | 16-byte footer
//--------------        &lt;--+
};
</codeblock>
<p>In the old format, the multiple-byte-width data types were not serialized before stored to disk,
so the token objects could not be moved between LE and BE platforms. The new format serializes all
header and footer data from host to BE byte order, so all object data can always be encrypted and
decrypted. However, the decrypted object data itself (body) must still be interpreted in host byte
order.</p>
<p>So the new format should only be used with fresh setups. The new format can be used by specifying
the new <parmname>tokversion</parmname> keyword in the token’s slot configuration in
<filepath>opencryptoki.conf</filepath>. For a value of equal or grater 3.12 the new format is used. </p>
<p>Here is a table of all key material that is used per version 3.12 token:</p>
<table id="key_material"  pgwide="1"><title></title><desc>
<p outputclass="summary">The five columns of this table list NAME, TYPE, GENERATION, USAGE, and STORAGE of all key material 
that is used per version 3.12 token</p>
</desc>
<tgroup cols="5">
<colspec colname="col1" colwidth="7*"/>
<colspec colname="col2" colwidth="8*"/>
<colspec colname="col3" colwidth="14*"/>
<colspec colname="col4" colwidth="17*"/>
<colspec colname="col5" colwidth="17*"/>
<thead>
<row>
<entry>NAME</entry>
<entry>TYPE</entry>
<entry>GENERATION</entry>
<entry>USAGE</entry>
<entry>STORAGE</entry>
</row>
</thead>
<tbody>
<row>
<entry>MK</entry>
<entry>256-bit AES</entry>
<entry>random</entry>
<entry>wrap tok.obj keys (AES-KW)</entry>
<entry>wrapped on disk (MK_SO,MK_USER)</entry>
</row>
<row>
<entry>SO KEK</entry>
<entry>256-bit AES</entry>
<entry>derived from SO PIN (PBKDF2)</entry>
<entry>wrap MK (AES-KW)</entry>
<entry>cached on stack/heap</entry>
</row>
<row>
<entry>User KEK</entry>
<entry>256-bit AES</entry>
<entry>derived from User PIN (PBKDF2)</entry>
<entry>wrap MK (AES-KW)</entry>
<entry>cached on stack/heap</entry>
</row>
<row>
<entry>SO PW hash</entry>
<entry>256-bit</entry>
<entry>derived from SO PIN (PBKDF2)</entry>
<entry>SO login</entry>
<entry>on disk (NVTOK.DAT)</entry>
</row>
<row>
<entry>User PW hash</entry>
<entry>256-bit</entry>
<entry>derived from User PIN (PBKDF2)</entry>
<entry>User login</entry>
<entry>on disk (NVTOK.DAT)</entry>
</row>
<row>
<entry>Tok.obj keys</entry>
<entry>256-bit AES</entry>
<entry>random</entry>
<entry>auth.enc of tok.obj data</entry>
<entry>wrapped on disk (in tok.objs)</entry>
</row>
</tbody>
</tgroup>
</table>
</section>
</conbody>
</concept>
<?Pub *0000003393?>
