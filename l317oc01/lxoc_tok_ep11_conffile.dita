<?xml version="1.0" encoding="UTF-8"?>
<!--Arbortext, Inc., 1988-2011, v.4002-->
<!DOCTYPE concept PUBLIC "-//IBM//DTD DITA IBM Concept//EN"
 "ibm-concept.dtd">
<?Pub Sty _display FontColor="red"?>
<?Pub Inc?>
<concept id="lxce_ep11_conffile" xml:lang="en-us">
<title>Defining an <keyword conref="lxoc_conref.dita#lxoc_conref/ep11token"/>-specific configuration
file</title>
<!--SH: Acrolinx run on Apr. 11, 2014, remaining flags cannot be avoided-->
<titlealts>
<navtitle>Defining an <keyword conref="lxoc_conref.dita#lxoc_conref/ep11token"/>-specific
configuration file</navtitle>
<?Pub Caret -1?>
<searchtitle><ph conref="lxcommon.dita#phrases/ph_loz_and_lone"/> and <keyword
conref="lxoc_conref.dita#lxoc_conref/ocrypto"/>: Defining an <keyword
conref="lxoc_conref.dita#lxoc_conref/ep11token"/>-specific configuration file</searchtitle>
</titlealts>
<shortdesc>One default configuration file for the <keyword
conref="lxoc_conref.dita#lxoc_conref/ep11token"/> called <codeph>ep11tok.conf</codeph> is delivered
by <keyword conref="lxoc_conref.dita#lxoc_conref/ocrypto"/>. You must adapt it according to your
installation's system environment. If you use multiple <keyword
conref="lxoc_conref.dita#lxoc_conref/ep11tokens"/>, you must provide an individual token
configuration file for each token. Each slot entry in the global configuration file
<filepath>opencryptoki.conf</filepath> defines these configuration file names. </shortdesc>
<prolog>
<metadata>
<keywords>
<indexterm><indexterm>configuring</indexterm></indexterm>
<indexterm><keyword conref="lxoc_conref.dita#lxoc_conref/ep11tokconfig"/>
<indexterm>APQN_ALLOWLIST</indexterm></indexterm>
<indexterm>APQN_ALLOWLIST</indexterm>
<indexterm><keyword conref="lxoc_conref.dita#lxoc_conref/ep11tokconfig"/>
<indexterm>STRICT_MODE</indexterm></indexterm>
<indexterm>STRICT_MODE</indexterm>
<indexterm><keyword conref="lxoc_conref.dita#lxoc_conref/ep11tokconfig"/>
<indexterm>VHSM_MODE</indexterm></indexterm>
<indexterm>VHSM_MODE</indexterm>
<indexterm><keyword conref="lxoc_conref.dita#lxoc_conref/ep11tokconfig"/>
<indexterm>CPFILTER</indexterm></indexterm>
<indexterm>CPFILTER</indexterm>
<indexterm><keyword conref="lxoc_conref.dita#lxoc_conref/ep11tokconfig"/>
<indexterm>OPTIMIZE_SINGLE_PART_OPERATIONS</indexterm></indexterm>
<indexterm>OPTIMIZE_SINGLE_PART_OPERATIONS</indexterm>
<indexterm>access control point<indexterm>ACP</indexterm></indexterm>
<indexterm>domain control point<indexterm>access control point</indexterm></indexterm>
<indexterm>ACP<indexterm>access control point</indexterm></indexterm>
<indexterm> ACP-filter configuration file</indexterm>
<indexterm><keyword conref="lxoc_conref.dita#lxoc_conref/ep11tokconfig"/>
<indexterm>sample</indexterm></indexterm>
</keywords>
</metadata>
</prolog>
<conbody>
<p>In the example from <xref href="lxoc_tok_common_adding.dita"/>, these names are defined as
<codeph>ep11tok01.conf</codeph> and <codeph>ep11tok02.conf</codeph>. If the environment variable
<codeph>OCK_EP11_TOKEN_DIR</codeph> is set, then the <keyword
conref="lxoc_conref.dita#lxoc_conref/ep11token"/> looks for the configuration file or files in the
directory specified with this variable. If <codeph>OCK_EP11_TOKEN_DIR</codeph> is not set, then the
<keyword conref="lxoc_conref.dita#lxoc_conref/ep11tokconfig"/>s are searched in the global <keyword
conref="lxoc_conref.dita#lxoc_conref/ocrypto"/> directory, for example:
<filepath>/etc/opencryptoki/ep11tok.conf</filepath>.</p>
<p><b>Example:</b> If a slot entry in <filepath>opencryptoki.conf </filepath> specifies
<codeph>confname = ep11tok02.conf</codeph>, and you set the environment variable
<codeph>OCK_EP11_TOKEN_DIR</codeph> like:
<codeblock>export OCK_EP11_TOKEN_DIR=/home/user/ep11token</codeblock>then your <keyword
conref="lxoc_conref.dita#lxoc_conref/ep11tokconfig"/> appears here:
<codeblock>&lt;root>/home/user/ep11token/ep11tok02.conf 
</codeblock> You can use the shown example to set your own token directory for test purposes.</p>
<note>The setting of this environment variable is ignored, if a program trying to access the
designated <keyword conref="lxoc_conref.dita#lxoc_conref/ep11token"/> is marked with file permission
<codeph>setuid</codeph>. </note>
<p>The following is a list of available options for an <keyword
conref="lxoc_conref.dita#lxoc_conref/ep11tokconfig"/>. A sample of such a file is shown in <xref
href="#lxce_ep11_conffile/ep11tok_config" format="dita"/>.</p>
<parml>
<plentry>
<pt rev="shv2">APQN_ALLOWLIST</pt>
<pd>
<p>Because different <keyword conref="lxoc_conref.dita#lxoc_conref/ep11"/> hardware security modules
(HSM) can use different wrapping keys (referred to as master keys in the <keyword
conref="lxoc_conref.dita#lxoc_conref/atke"/> environment), users need to specify which HSM, in
practice an adapter/domain pair, can be used by the <keyword
conref="lxoc_conref.dita#lxoc_conref/ep11token"/> as a target for cryptographic requests. Therefore,
an <keyword conref="lxoc_conref.dita#lxoc_conref/ep11tokconfig"/> contains a list of adapter/domain
pairs to be used.</p>
<p>You start this list of adapter/domain pairs starting with a line containing the keyword <codeph
rev="v2i1">APQN_ALLOWLIST</codeph>. Next follows the list which can specify up to 512 adapter/domain
pairs, denoted by decimal numbers in the range 0 - 255. Each pair designates an adapter (first
number) and a domain (second number) accessible to the <keyword
conref="lxoc_conref.dita#lxoc_conref/ep11token"/>. Close the list using the keyword END. </p>
<p>Alternatively, you can use the keyword <codeph>APQN_ANY</codeph> to define that all
adapter/domain pairs with <keyword conref="lxoc_conref.dita#lxoc_conref/ep11"/> firmware, that are
available to the system, can be used as target adapters. This is the default.</p>
<note othertype="Notes" type="other">
<ul>
<li>The term <term>APQN</term> stands for adjunct processor queue number. It designates the
combination of a <keyword conref="lxoc_conref.dita#lxoc_conref/cryptocoproc"/> (adapter) and a
domain, a so-called adapter/domain pair. At least one adapter/domain pair must be specified.</li>
<li>If more than one APQN is used by a token, then these APQNs must be configured with
the same master key.</li>
<li rev="shv2">This attribute  used to be APQN_WHITELIST but has been renamed due to the inclusive
terminology initiative. For compatibility reasons, you can still use the old name, but this is
considered to be deprecated.</li>
</ul>
</note>
<p>An adapter/domain pair is displayed by the <cmdname>lszcrypt</cmdname> tool or in the
<codeph>sys</codeph> file system (for example, in <codeph>/sys/bus/ap/devices</codeph>) in the form
<term>card .domain</term>, where both numbers are displayed in hexadecimal format.</p>
<p>There are two ways to specify the cryptographic adapter: </p>
<ul>
<li>either as an explicit list of adapter/domain pairs: 
<codeblock>
 <ph rev="v2i1">APQN_ALLOWLIST</ph>
  8 13
  10 13
 END</codeblock>
<p>The adapter and domain can be given in decimal, octal (with leading 0), or hexadecimal (with
leading 0x) notation:</p>
<codeblock>
 <ph rev="v2i1">APQN_ALLOWLIST</ph>
  8 0x0d
  0x0a 13
 END</codeblock>
<p>Valid adapter and domain values are in the range 0 to 255.</p>
</li>
<li>or as any available cryptographic adapters: <codeblock>APQN_ANY</codeblock>
</li>
</ul>
<p>In the example from <xref href="#lxce_ep11_conffile/ep11tok_config" format="dita"/>, adapter 0
with domains 0 and 1, and adapter 2 with domain 84 are specified as target for requests from the
<keyword conref="lxoc_conref.dita#lxoc_conref/ep11token"/>. In <xref
href="#lxce_ep11_conffile/f_lxce_apqn" format="dita"/>, these adapter/domain pairs are shown in
hexadecimal notation as APQNs (00,0000), (00,0001), and (02,0054).</p>
<fig expanse="column" id="f_lxce_apqn">
<title>Cryptographic configuration for an LPAR</title>
<image href="lxoc_f_apqn.jpg" placement="break" width="600">
<alt>Cryptographic configuration for an LPAR</alt>
</image>
<?Pub Caret 0?>
</fig>
</pd>
</plentry>
<plentry>
<pt>CPFILTER</pt>
<pd>The list of mechanisms returned by <apiname>C_GetMechanismList</apiname> is filtered using the
domain or access control point (ACP) settings of the used <keyword
conref="lxoc_conref.dita#lxoc_conref/cryptocoproc"/>s. The <keyword
conref="lxoc_conref.dita#lxoc_conref/ep11"/> access control point filter configuration file
(ACP-filter configuration file) is used to associate certain access (domain) control points with
mechanisms that are dependent on these access control points. The default ACP-filter configuration
file is <filepath>ep11cpfilter.conf</filepath> located in the same directory as this <keyword
conref="lxoc_conref.dita#lxoc_conref/ep11tokconfig"/>. You can optionally specify the name or
location, or both, of the ACP-filter file:
<codeblock>CPFILTER /etc/opencryptoki/ep11cpfilter.conf</codeblock><fig id="smp_filter_file" rev="v2i1"><title>Excerpt of a sample ACP-filter configuration
file</title><codeblock rev="v2i1">
#
# EP11 token ACP-filter configuration
#
# The list of mechanisms returned by C_GetMechanismList is filtered
# using the access control point settings of the used crypto adapters.
# The EP11 ACP-filter config file is used to associate certain access control
# points with mechanisms that are dependent on these access control points.
#
# Syntax:
#       acp: mech1, mech2, ...
#
# Both, acp as well as mech&lt;n> is specified as name or in decimal, octal
# (with leading 0) or hexadecimal (with leading 0x):
#
#       XCP_CPB_SIGN_SYMM: CKM_SHA256_HMAC, CKM_SHA256_HMAC_GENERAL
#       4: 0x00000251, 0x00000252
#

# sign with HMAC or CMAC
XCP_CPB_SIGN_SYMM: CKM_SHA256_HMAC, CKM_SHA256_HMAC_GENERAL, CKM_SHA224_HMAC, CKM_SHA224_HMAC_GENERAL, CKM_SHA384_HMAC, CKM_SHA384_HMAC_GENERAL, CKM_SHA512_HMAC, CKM_SHA512_HMAC_GENERAL, CKM_SHA_1_HMAC, CKM_SHA_1_HMAC_GENERAL, CKM_IBM_SHA3_224_HMAC, CKM_IBM_SHA3_256_HMAC,CKM_IBM_SHA3_384_HMAC, CKM_IBM_SHA3_512_HMAC, CKM_IBM_CMAC, CKM_DES3_CMAC, CKM_DES3_CMAC_GENERAL, CKM_AES_CMAC, CKM_AES_CMAC_GENERAL

# verify with HMAC or CMAC
XCP_CPB_SIGVERIFY_SYMM: CKM_SHA256_HMAC, CKM_SHA256_HMAC_GENERAL, CKM_SHA224_HMAC, CKM_SHA224_HMAC_GENERAL, CKM_SHA384_HMAC, CKM_SHA384_HMAC_GENERAL, CKM_SHA512_HMAC, CKM_SHA512_HMAC_GENERAL, CKM_SHA_1_HMAC, CKM_SHA_1_HMAC_GENERAL, CKM_IBM_SHA3_224_HMAC, CKM_IBM_SHA3_256_HMAC,CKM_IBM_SHA3_384_HMAC, CKM_IBM_SHA3_512_HMAC, CKM_IBM_CMAC, CKM_DES3_CMAC, CKM_DES3_CMAC_GENERAL, CKM_AES_CMAC, CKM_AES_CMAC_GENERAL

# encrypt with symmetric keys
XCP_CPB_ENCRYPT_SYMM: CKM_AES_ECB, CKM_AES_CBC, CKM_AES_CBC_PAD, CKM_DES3_ECB, CKM_DES3_CBC, CKM_DES3_CBC_PAD, CKM_DES_ECB, CKM_DES_CBC

#decrypt with private keys
XCP_CPB_DECRYPT_ASYMM: CKM_RSA_PKCS

# decrypt with symmetric keys
XCP_CPB_DECRYPT_SYMM: CKM_AES_ECB, CKM_AES_CBC, CKM_AES_CBC_PAD, CKM_DES3_ECB, CKM_DES3_CBC, CKM_DES3_CBC_PAD, CKM_DES_ECB, CKM_DES_CBC

# generate asymmetric keypairs
XCP_CPB_KEYGEN_ASYMM: CKM_RSA_PKCS_KEY_PAIR_GEN, CKM_RSA_X9_31_KEY_PAIR_GEN, CKM_EC_KEY_PAIR_GEN, CKM_DSA_KEY_PAIR_GEN, CKM_DH_PKCS_KEY_PAIR_GEN

# DSA private-key use
XCP_CPB_ALG_DSA: CKM_DSA_PARAMETER_GEN, CKM_DSA_KEY_PAIR_GEN, CKM_DSA, CKM_DSA_SHA1

# Diffie-Hellman use (private keys)
XCP_CPB_ALG_DH: CKM_ECDH1_DERIVE, CKM_DH_PKCS_PARAMETER_GEN, CKM_DH_PKCS_KEY_PAIR_GEN, CKM_DH_PKCS_DERIVE

# enable support of curve25519, c448 and related algorithms incl. EdDSA (ed25519 and ed448)
XCP_CPB_ALG_EC_25519: CKM_IBM_EC_C25519, CKM_IBM_EDDSA_SHA512, CKM_IBM_EC_C448, CKM_IBM_ED448_SHA3

#enable support of Dilithium
XCP_CPB_ALG_PQC_DILITHIUM: CKM_IBM_DILITHIUM
</codeblock></fig></pd>
</plentry>
<plentry>
<pt>DIGEST_LIBICA <varname>&lt;libica-path></varname> | DEFAULT | OFF</pt>
<pd>To improve the performance of required hash functions, the <keyword
conref="lxoc_conref.dita#lxoc_conref/ep11token"/> on initialization loads the default <keyword
conref="lxoc_conref.dita#lxoc_conref/libica"/> library. If required, the <keyword
conref="lxoc_conref.dita#lxoc_conref/ep11token"/> invokes the <keyword
conref="lxoc_conref.dita#lxoc_conref/libica"/> SHA-based hash functions, because the <keyword
conref="lxoc_conref.dita#lxoc_conref/libica"/> library performs these hash functions on the <keyword
conref="lxoc_conref.dita#lxoc_conref/cpacf"/>, thus avoiding hash processing on a <keyword
conref="lxoc_conref.dita#lxoc_conref/cryptocoproc"/> which results in I/O operations to the adapter.
<p><keyword conref="lxoc_conref.dita#lxoc_conref/libica"/> provides an <keyword
conref="lxoc_conref.dita#lxoc_conref/openssl"/> based software fall-back, in case CPACF or a certain
hashing function of CPACF is not available. In case a <keyword
conref="lxoc_conref.dita#lxoc_conref/libica"/> operation fails, because neither the hardware nor the
software support is available, or if <keyword conref="lxoc_conref.dita#lxoc_conref/libica"/> is not
available at all, then the request is passed to the <keyword
conref="lxoc_conref.dita#lxoc_conref/ep11"/> library instead.</p><p>With the DIGEST_LIBICA option,
you can control which <keyword conref="lxoc_conref.dita#lxoc_conref/libica"/> library is loaded:</p><parml>
<plentry>
<pt>DEFAULT</pt>
<pd>The default <keyword conref="lxoc_conref.dita#lxoc_conref/libica"/> library is loaded. If
<keyword conref="lxoc_conref.dita#lxoc_conref/libica"/> could not be found, a message is issued to
<filepath>syslog</filepath>, and all hash based functions use the <keyword
conref="lxoc_conref.dita#lxoc_conref/ep11lib"/>.<p>The same behavior is applied if the DIGEST_LIBICA
option is not specified at all.</p></pd>
</plentry>
<plentry>
<pt>&lt;libica-path></pt>
<pd>The specified library is loaded. If it can not be found, a message is issued to
<filepath>syslog</filepath>, and token initialization fails.</pd>
</plentry>
<plentry>
<pt>OFF</pt>
<pd>No <keyword conref="lxoc_conref.dita#lxoc_conref/libica"/> is loaded, and all hash based
functions use the <keyword conref="lxoc_conref.dita#lxoc_conref/ep11lib"/>.</pd>
</plentry>
</parml><p>If DIGEST_LIBICA is not specified, then the default <keyword
conref="lxoc_conref.dita#lxoc_conref/libica"/> library is loaded (same behavior as for DIGEST_LIBICA
DEFAULT).</p>
</pd>
</plentry>
<plentry>
<pt>FORCE_SENSITIVE</pt>
<pd>Specify this option to force that the default for CKA_SENSITIVE is CK_TRUE for secret keys. For
more information, see <xref href="lxoc_tok_ep11_restrict.dita"/>.</pd>
</plentry>
<plentry>
<pt>OPTIMIZE_SINGLE_PART_OPERATIONS</pt>
<pd>Set this option to optimize the performance of single part sign- and verify-operations, as well
as of single part encrypt- or decrypt-operations. Then the <apiname>init</apiname> call is not
passed through the <keyword conref="lxoc_conref.dita#lxoc_conref/ep11lib"/> as long as there is no
corresponding multi-part operation. <p>When this option is enabled, error handling can be slightly
different, when errors from the deferred <apiname>init</apiname> call are presented during the first
update call or during the calls to <apiname>C_Sign</apiname>, <apiname>C_Verify</apiname>,
<apiname>C_Encrypt</apiname>, or <apiname>C_Decrypt</apiname> for a single part operation. That is,
the first update call on a multi part operation or the mentioned calls for a single part operation
may return errors, which are usually not returned by the update call. Such errors may be for
example:</p><sl>
<sli>CKR_OBJECT_HANDLE_INVALID</sli>
<sli>CKR_ATTRIBUTE_VALUE_INVALID</sli>
<sli>CKR_KEY_HANDLE_INVALID</sli>
<sli>CKR_KEY_SIZE_RANGE</sli>
<sli>CKR_KEY_TYPE_INCONSISTENT</sli>
<sli>CKR_MECHANISM_INVALID</sli>
<sli>CKR_MECHANISM_PARAM_INVALID</sli>
</sl></pd>
</plentry>
<plentry rev="shv2">
<pt>PKEY_MODE</pt>
<pd>Use this option to define that for <keyword conref="lxoc_conref.dita#lxoc_conref/ep11"/> secure
keys of type AES or EC an additional pertaining protected key shall be created, and the protected
keys shall be used whenever possible. This significantly improves performance, because protected
keys work on the <keyword conref="lxoc_conref.dita#lxoc_conref/cpacf"/> feature, and calls to
<keyword conref="lxoc_conref.dita#lxoc_conref/cpacf"/> are much faster than calls to an <keyword
conref="lxoc_conref.dita#lxoc_conref/ep11coproc"/>. <note othertype="Notes" type="other">
<ul compact="yes">
<li>Processing of the PKEY_MODE option is performed by a transparent <keyword
conref="lxoc_conref.dita#lxoc_conref/ibm"/>-specific mechanism. This mechanism in turn reads certain
attributes of the processed key object to determine the generation of the protected key. The new
protected key is bound to the key object by the attribute CKA_IBM_OPAQUE_PKEY. For an explanation of
the involved attributes, read <xref
href="lxoc_tok_ibmmechs.dita#lxoc_ibmcommon/misc_attribs_section"/>.</li>
<li>The PKEY_MODE option is effective only on <ph conref="lxcommon.dita#phrases/ph_ibmz15"/>
processors or later, with <keyword conref="lxoc_conref.dita#lxoc_conref/ep11coprocs"/> starting with
CEX7P. It requires the <keyword conref="lxoc_conref.dita#lxoc_conref/ep11hostlib"/> 3.0 or
later.</li>
<li>Keys created before introducing the protected key option are not usable for protected key
support, because they do not have the CKA_IBM_PROTKEY_EXTRACTABLE attribute. Only keys created after
activating the protected key option with the  CREATE4NONEXTR mode are eligible for getting a
protected key, depending on their key type (only AES and EC). See also  <xref
href="lxoc_tok_ibmmechs.dita#lxoc_ibmcommon/misc_attribs_section"/>. </li>
</ul>
</note><p>Set the PKEY_MODE option to one of the following modes:</p><parml>
<plentry>
<pt>DISABLED</pt>
<pd>Protected key support is disabled. All keys are used as secure keys. This mode allows to
completely disable protected key support, for example, for performance comparisons.</pd>
</plentry>
<plentry>
<pt>USE_EXISTING</pt>
<pd>This is the default. <dl>
<dlentry>
<dt>New keys</dt>
<dd>If the application did not specify attribute CKA_IBM_PROTKEY_EXTRACTABLE in its template for key
generation, new keys of any type get CKA_IBM_PROTKEY_EXTRACTABLE=CK_FALSE, and no protected key is
created.</dd>
</dlentry>
<dlentry>
<dt>Existing keys</dt>
<dd>Existing secure keys with a valid protected key are used via this protected key, and any invalid
protected key is re-created with the help of the current firmware master key.</dd>
</dlentry>
</dl></pd>
</plentry>
<plentry>
<pt>CREATE4NONEXTR</pt>
<pd>
<dl>
<dlentry>
<dt>New keys</dt>
<dd>If the application did not specify CKA_IBM_PROTKEY_EXTRACTABLE in its template for key
generation, new keys of any type with CKA_EXTRACTABLE=CK_FALSE get attribute
CKA_IBM_PROTKEY_EXTRACTABLE=CK_TRUE and a protected key is automatically created at first use of the
key.</dd>
</dlentry>
<dlentry>
<dt>Existing keys</dt>
<dd>Existing keys with a protected key bound to that key with attribute CKA_IBM_OPAQUE_PKEY are used
via this bound protected key. Also, if required, for example, after deactivating and reactivating an
LPAR, any invalid protected key is re-created by wrapping with the current firmware master key.</dd>
</dlentry>
</dl>
</pd>
</plentry>
<!--<plentry>
<pt>CREATE4EXTR</pt>
<pd><dl>
<dlentry>
<dt>New keys</dt><dd></dd></dlentry>
<dlentry>
<dt>Existing keys</dt>
<dd></dd></dlentry></dl></pd>
</plentry>
<plentry>
<pt>CREATE4ALL</pt>
<pd><dl>
<dlentry>
<dt>New keys</dt><dd></dd></dlentry>
<dlentry>
<dt>Existing keys</dt>
<dd></dd></dlentry></dl></pd>
</plentry>-->
</parml></pd>
</plentry>
<plentry>
<pt>STRICT_MODE</pt>
<pd>In strict-mode, all session-keys strictly belong to the <keyword
conref="lxoc_conref.dita#lxoc_conref/pkcs11session"/> that created it. When the <keyword
conref="lxoc_conref.dita#lxoc_conref/pkcs11session"/> ends, all session keys created for this
session can no longer be used. <p>For more information, read topic <term>Controlling access to
cryptographic objects</term> in  <xref
href="https://www.ibm.com/docs/en/linux-on-systems?topic=overview-exploiting-enterprise-pkcs-11-using-opencryptoki"
format="html" scope="external"><cite>Exploiting Enterprise PKCS #11 using
openCryptoki</cite></xref>.</p></pd>
</plentry>
<plentry>
<pt>USE_PRANDOM</pt>
<pd>Set this option to control from where the <keyword
conref="lxoc_conref.dita#lxoc_conref/ep11token"/> reads random data. With USE_PRANDOM specified, the
<keyword conref="lxoc_conref.dita#lxoc_conref/ep11token"/> reads random data from
<filepath>/dev/prandom</filepath>, or from <filepath>/dev/urandom</filepath> if
<filepath>/dev/prandom</filepath> is not available. The default is to read the random data using the
<apiname>m_GenerateRandom</apiname> function from the <keyword
conref="lxoc_conref.dita#lxoc_conref/cexallplong"/>. </pd>
</plentry>
<plentry>
<pt>VHSM_MODE</pt>
<pd>In VHSM-mode (virtual-HSM), all keys generated by the <keyword
conref="lxoc_conref.dita#lxoc_conref/ep11token"/> strictly belong to the <keyword
conref="lxoc_conref.dita#lxoc_conref/ep11token"/> that created it. Every <keyword
conref="lxoc_conref.dita#lxoc_conref/ep11token"/> running in this mode requires a VHSM card-PIN
which must be set using the <cmdname>pkcsep11_session</cmdname> tool. </pd>
</plentry>
</parml>
<fig id="ep11tok_config" expanse="column">
<title>Sample of an <keyword conref="lxoc_conref.dita#lxoc_conref/ep11tokconfig"/></title>
<codeblock>
#
# EP11 token configuration
#
APQN_WHITELIST
0 0
0 1
2 84
END
FORCE_SENSITIVE
STRICT_MODE
VHSM_MODE
CPFILTER /etc/opencryptoki/ep11cpfilter.conf
OPTIMIZE_SINGLE_PART_OPERATIONS
DIGEST_LIBICA DEFAULT
USE_PRANDOM
</codeblock>
</fig>

</conbody>
</concept>
<?Pub *0000000808?>
