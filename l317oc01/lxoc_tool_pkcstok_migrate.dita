<?xml version="1.0" encoding="UTF-8"?>
<!--Arbortext, Inc., 1988-2011, v.4002-->
<!DOCTYPE reference PUBLIC "-//IBM//DTD DITA IBM Reference//EN"
 "ibm-reference.dtd">
<?Pub Sty _display FontColor="red"?>
<reference id="lxoc_tool_pkcstok_migrate" xml:lang="en-us">
<title>Migrating to FIPS compliance - <cmdname>pkcstok_migrate</cmdname> utility</title>
<titlealts>
<navtitle>pkcstok_migrate</navtitle>
<searchtitle><ph conref="lxcommon.dita#phrases/ph_loz_and_lone"/> and <keyword
conref="lxoc_conref.dita#lxoc_conref/ocrypto"/>:The pkcstok_migrate tool</searchtitle>
</titlealts>
<shortdesc>Use the <cmdname>pkcstok_migrate</cmdname> tool to migrate the data stores of an <keyword
conref="lxoc_conref.dita#lxoc_conref/ep11token"/>, a <keyword
conref="lxoc_conref.dita#lxoc_conref/ccatoken"/>, an <keyword
conref="lxoc_conref.dita#lxoc_conref/libicatoken"/>, or a <keyword
conref="lxoc_conref.dita#lxoc_conref/softtoken"/> to a FIPS compliant format. This FIPS compliant
data format is available starting with <keyword conref="lxoc_conref.dita#lxoc_conref/ocrypto"/>
version 3.12. You can use this tool to migrate tokens created with all versions of <keyword
conref="lxoc_conref.dita#lxoc_conref/ocrypto"/>, because also for version 3.12 or later, the old
non-compliant format is the default. Being FIPS compliant, the token data is stored in a format that
is better protected against attacks than the previously used data format.</shortdesc>
<prolog>
<metadata>
<keywords>
<indexterm>pkcstok_migrate</indexterm>
<indexterm>tools<indexterm>pkcstok_migrate</indexterm></indexterm>
<indexterm>utilities<indexterm>pkcstok_migrate</indexterm></indexterm>
</keywords>
<?Pub Caret 141?>
</metadata>
</prolog>
<refbody>
<section>
<p>For further information, read the <cmdname>pkcstok_migrate</cmdname> man page.</p>
</section>
<section>
<title>Parameters</title>
<p>
<codeblock>
# pkcstok_migrate -h

<b>Help:</b>         pkcstok_migrate -h
-h, --help    Show this help

<b>Options:</b>

-s, --slotid SLOTID            PKCS slot number (required)
-d, --datastore DATASTORE      token datastore location (required)
-c, --confdir CONFDIR          location of opencryptoki.conf (required)
-u, --userpin USERPIN          token user pin (prompted if not specified)
-p, --sopin SOPIN              token SO pin (prompted if not specified)
-v, --verbose LEVEL            set verbose level (optional):
                               none (default), error, warn, info, devel, debug
</codeblock>
</p>
</section>
<section>
<title>Functionality</title>
<p>The utility:</p>
<ul>
<li>directly accesses the token objects via file operations;</li>
<li>assumes that no other action is currently running. It checks if the slot manager
<cmdname>pkcsslotd</cmdname> is running and asks the user to end it if yes.</li>
</ul>
<p>Before making any changes to the repository, a temporary copy is created. Migration takes place
on this copy. The copied folder is suffixed with <codeph>_PKCSTOK_MIGRATE_TMP</codeph>. If the
migration fails, the old repository is still available.</p>
<p>Running a migration again, would remove any remaining backups from previous runs, create a new
backup, and then do the migration.</p>
<ul>
<li>After successfully migrating all token objects, the original repository folder is renamed by
appending the suffix <codeph>_BAK</codeph>, and the new repository folder gets the name of the
original one.</li>
<li>Also, the <filepath>opencryptoki.conf</filepath> file is updated by inserting (or updating) the
<parmname>tokversion</parmname> parameter in the tokenâ€™s slot configuration. The old configuration
file is still available with the same suffix <codeph> _BAK</codeph>.</li>
</ul>
<p>This makes the new repository immediately usable after restarting the
<cmdname>pkcsslotd</cmdname> daemon, but also allows the user to switch back manually to the old
token format.</p>
<p rev="shv2"><b>Example:</b> To transform a <keyword conref="lxoc_conref.dita#lxoc_conref/ccatoken"
/> into the FIPS compliant data format perform a sequence of commands with your adequate input,
similar to the following:</p>
<codeblock rev="v2i1">
systemctl stop pkcsslotd.service /* for Linux distributions providing systemd */
/* or */
service pkcsslotd stop

# pkcstok_migrate --slot 2 --sopin 76543210 --userpin 12345678 
                  --confdir /etc/opencryptoki 
                  --datastore /var/lib/opencryptoki/ccatok


service pkcsslotd start</codeblock>
<p rev="shv2">The output may look similar to the following:</p>
<codeblock rev="v2i1">
pkcstok_migrate:
Summary of input parameters:
  datastore = /var/lib/opencryptoki/ccatok
  confdir = /etc/opencryptoki
  slot ID = 2
  user PIN specified
  SO PIN specified

Slot ID 2 points to DLL name libpkcs11_cca.so, which is a CCA token.
Data store /usr/local/var/lib/opencryptoki/ccatok points to this token info:
  label           : IBM CCA PKCS #11
  manufacturerID  : IBM
  model           : CCA
  serialNumber    :
  hardwareVersion : 0.0
  firmwareVersion : 0.0
Migrate this token with given slot ID? y/n
y
Migrated 2 object(s) out of 2 object(s).
Pre-migration data backed up at '/usr/local/var/lib/opencryptoki/ccatok_BAK'
Config file backed up at '/usr/local/etc/opencryptoki/opencryptoki.conf_BAK'
Remove these backups manually after testing the new repository.
pkcstok_migrate finished successfully.

</codeblock>
</section>
</refbody>
</reference>
<?Pub *0000014551?>
