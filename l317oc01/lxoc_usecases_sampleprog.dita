<?xml version="1.0" encoding="UTF-8"?>
<!--Arbortext, Inc., 1988-2011, v.4002-->
<!DOCTYPE concept PUBLIC "-//IBM//DTD DITA IBM Concept//EN"
 "ibm-concept.dtd">
<?Pub Sty _display FontColor="red"?>
<concept id="lxoc_usecaes_sample" xml:lang="en-us">
<title>Sample <keyword conref="lxoc_conref.dita#lxoc_conref/ocrypto"/> program</title>
<!--SH: Acrolinx run on Apr. 10, 2014, remaining flags cannot be avoided-->
<titlealts>
<navtitle><keyword conref="lxoc_conref.dita#lxoc_conref/ocrypto"/> sample program</navtitle>
<searchtitle><ph conref="lxcommon.dita#phrases/lib_title"/>: <keyword
conref="lxoc_conref.dita#lxoc_conref/ocrypto"/> Code sample for RSA key pair
generation</searchtitle>
</titlealts>
<shortdesc>View a completely coded example of an <keyword
conref="lxoc_conref.dita#lxoc_conref/ocrypto"/> application that performs an RSA key generation
operation.</shortdesc>
<prolog>
<metadata>
<keywords>
<indexterm><keyword conref="lxoc_conref.dita#lxoc_conref/ocrypto"/>
application<indexterm>sample</indexterm></indexterm>
</keywords>
</metadata>
</prolog>
<conbody>
<note>This sample program does not include the operation to encrypt data with the previously
generated RSA private key as described in step <xref
href="lxoc_usecases_structure.dita#lxoc_usecaeses_structure/not_coded"/> of <xref
href="lxoc_usecases_structure.dita"/>.</note>
<codeblock>/*
 * Build:
 *   cc -o pkcs11 pkcs11.c -ldl
 *
 * Usage:
 *   pkcs11 &lt;so_name> &lt;slot_id> &lt;user_pin>
 *
 * Description:
 *   Loads the PKCS11 shared library &lt;so_name>,
 *   opens a session with slot &lt;slot_id>,
 *   logs the user in using the PIN &lt;user_pin>,
 *   and performs an RSA key generation operation.
 */
<b>/* Step 1 */</b> 
#include &lt;opencryptoki/pkcs11.h>                           
#include &lt;string.h>
#include &lt;stdlib.h>
#include &lt;dlfcn.h>
 
#define NELEM(array) (sizeof(array) / sizeof((array)[0]))
 
int main(int argc, char *argv[])
{
    CK_C_GetFunctionList get_functionlist = {NULL};
    CK_SESSION_HANDLE session = CK_INVALID_HANDLE;
    CK_FUNCTION_LIST *fn = NULL;
    void *pkcs11so = NULL;
    CK_SLOT_ID slot_id;
    CK_FLAGS flags;
    int rc = -1;
    char *ptr;
    CK_RV rv;
 
    if (argc != 4) goto err;
 
    pkcs11so = dlopen(argv[1], RTLD_NOW);
    if (pkcs11so == NULL) goto err;
 
    slot_id = strtoul(argv[2], &amp;ptr, 0);
    if (*(argv[2]) == '\0' || *ptr != '\0') goto err;
 
    *(void **)(&amp;get_functionlist) = dlsym(pkcs11so, "C_GetFunctionList");
    if (get_functionlist == NULL) goto err;
 
    rv = get_functionlist(&amp;fn);                               
    if (rv != CKR_OK || fn == NULL) goto err;

<b>/* Step 2 */</b> 
    rv = fn->C_Initialize(NULL);                         
    if (rv != CKR_OK) goto err;
 
    flags = CKF_SERIAL_SESSION | CKF_RW_SESSION;
<b>/* Step 4  (Step 3 assumed to be done by pkcsconf) */</b>
    rv = fn->C_OpenSession(slot_id, flags, NULL, NULL, &amp;session);
    if (rv != CKR_OK || session == CK_INVALID_HANDLE) goto err;

<b>/* Step 5 */</b>
    rv = fn->C_Login(session, CKU_USER, (CK_UTF8CHAR *)argv[3], strlen(argv[3]));
    if (rv != CKR_OK) goto err;

 <b>/* Step 6  (Step 7 not coded in this example */</b>
    {
        CK_MECHANISM mechanism = {CKM_RSA_PKCS_KEY_PAIR_GEN, NULL, 0};
        CK_BYTE e[] = {0x01, 0x00, 0x01};
        CK_ULONG modbits = 4096;
        CK_BYTE subject[] = "RSA4096 Test";
        CK_BYTE id[] = {1};
        CK_BBOOL true_ = CK_TRUE;
 
        CK_ATTRIBUTE template_publ[] = {
            {CKA_ENCRYPT,         &amp;true_,   sizeof(true_)},
            {CKA_VERIFY,          &amp;true_,   sizeof(true_)},
            {CKA_WRAP,            &amp;true_,   sizeof(true_)},
            {CKA_MODULUS_BITS,    &amp;modbits, sizeof(modbits)},
            {CKA_PUBLIC_EXPONENT, e,        sizeof(e)}
        };
        CK_ATTRIBUTE template_priv[] = {
            {CKA_SUBJECT,         subject,  sizeof(subject)},
            {CKA_ID,              id,       sizeof(id)},
            {CKA_TOKEN,           &amp;true_,   sizeof(true_)},
            {CKA_PRIVATE,         &amp;true_,   sizeof(true_)},
            {CKA_SENSITIVE,       &amp;true_,   sizeof(true_)},
            {CKA_DECRYPT,         &amp;true_,   sizeof(true_)},
            {CKA_SIGN,            &amp;true_,   sizeof(true_)},
            {CKA_UNWRAP,          &amp;true_,   sizeof(true_)}
        };
 
        CK_OBJECT_HANDLE publ, priv;
 
        rv = fn->C_GenerateKeyPair(session, &amp;mechanism,
                                   template_publ, NELEM(template_publ),
                                   template_priv, NELEM(template_priv),
                                   &amp;publ, &amp;priv);
        if (rv != CKR_OK) goto err;
    }

<b>/* Step 8 */</b> 
    rv = fn->C_Logout(session);
    if (rv != CKR_OK) goto err;
 
    rv = fn->C_CloseSession(session);
    if (rv != CKR_OK) goto err;

 <b>/* Step 9 */</b>   
    rv = fn->C_Finalize(NULL);
    if (rv != CKR_OK) goto err;
 
    rc = 0;
err:
    if (pkcs11so != NULL)
        dlclose(pkcs11so);
    return rc;
}
 

</codeblock>
</conbody>
</concept>
<?Pub *0000003393?>
