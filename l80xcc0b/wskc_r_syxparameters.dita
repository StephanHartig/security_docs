<?xml version="1.0" encoding="UTF-8"?>
<!--Arbortext, Inc., 1988-2011, v.4002-->
<!DOCTYPE reference PUBLIC "-//IBM//DTD DITA IBM Reference//EN" "ibm-reference.dtd">
<?Pub Sty _display FontColor="red"?>
<reference id="l0wskc02_syxparameters" xml:lang="en-us">
<title>Parameters</title>
 <titlealts>
    <navtitle>Parameters</navtitle>
    <searchtitle><keyword conref="wskc_conref-l0wskc04.dita#conref-l0wskc04/cca_long"/> (<keyword
conref="wskc_conref-l0wskc04.dita#conref-l0wskc04/cca"/>): Parameters for  <keyword
conref="wskc_conref-l0wskc04.dita#conref-l0wskc04/vbclsyx"/></searchtitle>
  </titlealts>

<shortdesc>The parameters for <keyword conref="wskc_conref-l0wskc04.dita#conref-l0wskc04/vbclsyx"></keyword>.</shortdesc>
<prolog><metadata>
<keywords><indexterm><keyword conref="wskc_conref-l0wskc04.dita#conref-l0wskc04/vbnmsyx"></keyword> (<keyword conref="wskc_conref-l0wskc04.dita#conref-l0wskc04/vbclsyx"></keyword>)<indexterm>parameters</indexterm></indexterm><indexterm>rule_array_count parameter<indexterm><keyword conref="wskc_conref-l0wskc04.dita#conref-l0wskc04/vbnmsyx"></keyword> verb</indexterm></indexterm><indexterm>rule_array parameter<indexterm><keyword conref="wskc_conref-l0wskc04.dita#conref-l0wskc04/vbnmsyx"></keyword> verb</indexterm></indexterm><indexterm>control information<indexterm>for <keyword conref="wskc_conref-l0wskc04.dita#conref-l0wskc04/vbnmsyx"></keyword></indexterm></indexterm><indexterm>AES</indexterm><indexterm>DES</indexterm><indexterm>HMAC</indexterm><indexterm>AESKW</indexterm><indexterm>PKCSOAEP</indexterm><indexterm>PKCS-1.2</indexterm><indexterm>PKOAEP2</indexterm><indexterm>ZERO-PAD</indexterm><indexterm>SHA-1</indexterm><indexterm>SHA-256</indexterm><indexterm>SHA-384</indexterm><indexterm>SHA-512</indexterm><indexterm>source_key_identifier_length parameter<indexterm><keyword conref="wskc_conref-l0wskc04.dita#conref-l0wskc04/vbnmsyx"></keyword> verb</indexterm></indexterm><indexterm>source_key_identifier parameter<indexterm><keyword conref="wskc_conref-l0wskc04.dita#conref-l0wskc04/vbnmsyx"></keyword> verb</indexterm></indexterm><indexterm>transporter_key_identifier_length parameter<indexterm><keyword conref="wskc_conref-l0wskc04.dita#conref-l0wskc04/vbnmsyx"></keyword> verb</indexterm></indexterm><indexterm>transporter_key_identifier parameter<indexterm><keyword conref="wskc_conref-l0wskc04.dita#conref-l0wskc04/vbnmsyx"></keyword> verb</indexterm></indexterm><indexterm>enciphered_key_length parameter<indexterm><keyword conref="wskc_conref-l0wskc04.dita#conref-l0wskc04/vbnmsyx"></keyword> verb</indexterm></indexterm><indexterm>enciphered_key parameter<indexterm><keyword conref="wskc_conref-l0wskc04.dita#conref-l0wskc04/vbnmsyx"></keyword> verb</indexterm></indexterm></keywords><?Pub Caret 115?>
</metadata></prolog>
<refbody>
<section><p>For the definitions of the <synph><var>return_code</var></synph>, <synph><var>reason_code</var></synph>, <synph><var>exit_data_length</var></synph>, and <synph><var>exit_data</var></synph> parameters, see <xref href="wskc_c_vparms.dita#l0wskc02_vparms"></xref>.</p></section>
<section> <parml><plentry>
<pt>rule_array_count </pt>
<pd><table colsep="0" frame="none" outputclass="presentation" pgwide="2" rowsep="0">
<tgroup cols="2">
<colspec colname="col1" colwidth="1*"/>
<colspec colname="col2" colwidth="5*"/>
<tbody>
<row>
<entry colname="col1"><b>Direction:</b></entry>
<entry colname="col2">Input</entry>
</row>
<row>
<entry colname="col1"><b>Type:</b></entry>
<entry colname="col2">Integer</entry>
</row>
</tbody>
</tgroup>
</table>A pointer to an integer variable containing the number of elements in the <i>rule_array</i>
variable. This value must be 1, 2, or 3.</pd>
</plentry><plentry>
<pt>rule_array </pt>
<pd><table colsep="0" frame="none" outputclass="presentation" pgwide="2" rowsep="0">
<tgroup cols="2">
<colspec colname="col1" colwidth="1*"/>
<colspec colname="col2" colwidth="5*"/>
<tbody>
<row>
<entry colname="col1"><b>Direction:</b></entry>
<entry colname="col2">Input</entry>
</row>
<row>
<entry colname="col1"><b>Type:</b></entry>
<entry colname="col2">String array</entry>
</row>
</tbody>
</tgroup>
</table>Keywords that provide control information to the <ph>verb</ph>. Each keyword is left-aligned
in 8-byte fields and padded on the right with blanks. All keywords must be in contiguous storage.
The <synph><var>rule_array</var></synph> keywords are described in <xref
href="#l0wskc02_syxparameters/l0wskc02_syxkey"/>.<table frame="all" id="l0wskc02_syxkey" pgwide="1">
<title>Keywords for <keyword conref="wskc_conref-l0wskc04.dita#conref-l0wskc04/vbnmsyx"/> control
information</title>
<desc>
<p outputclass="summary">Keywords for <keyword
conref="wskc_conref-l0wskc04.dita#conref-l0wskc04/vbnmsyx"/> control information</p>
</desc>
<tgroup cols="2" colsep="1" rowsep="1">
<colspec colname="col1" colwidth="2*"/>
<colspec colname="col2" colwidth="14*"/>
<thead>
<row>
<entry align="left" valign="bottom">Keyword</entry>
<entry align="left" valign="bottom">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" nameend="col2" namest="col1" valign="top"><b><i>Algorithm</i></b> (One,
optional)</entry>
</row>
<row>
<entry align="left" valign="top"><synph><kwd>AES</kwd></synph></entry>
<entry align="left" valign="top">Export an AES key. If
<synph><var>source_key_identifier</var></synph> is a variable-length symmetric key token or label,
only the <synph><kwd>PKOAEP2</kwd></synph> and <synph><kwd>AESKW</kwd></synph> key formatting
methods are supported.</entry>
</row>
<row>
<entry align="left" valign="top"><synph><kwd>DES</kwd></synph></entry>
<entry align="left" valign="top">Export a DES key. This is the default.</entry>
</row>
<row>
<entry align="left" valign="top"><synph><kwd>HMAC</kwd></synph></entry>
<entry align="left" valign="top">Export an HMAC key. Only the <synph><kwd>PKOAEP2</kwd></synph> and
<synph><kwd>AESKW</kwd></synph> key formatting methods are supported.</entry>
</row>
<row>
<entry align="left" nameend="col2" namest="col1" valign="top"><b><i>Recovery method</i></b> (One,
required)</entry>
</row>
<row>
<entry colname="col1"><synph><kwd>AESKW</kwd></synph></entry>
<entry colname="col2">Specifies that the key is to be formatted using
<synph><kwd>AESKW</kwd></synph> and placed in an external variable length CCA token. The
<synph><var>transport_key_identifier</var></synph> must be an AES EXPORTER. This rule is not valid
with the <synph><kwd>DES</kwd></synph> algorithm keyword or with AES DATA (version <ph>X'04'</ph>)
keys.</entry>
</row>
<row rev="sh15">
<entry colname="col1"><synph><kwd>AESKWCV</kwd></synph></entry>
<entry colname="col2">Specifies to return the key formatted using the ANS X9.102 AESKW method
creating a special variable-length symmetric key-token whose key type is DESUSECV. The AESKW payload
that contains the DES key is encrypted by the AES EXPORTER key-encrypting key provided as the
transport key, and returned in an external variable-length symmetric key-token with a token
algorithm of DES. The DES control vector (with its key form bits masked to binary zeros to mask the
key length) along with other significant key-token information is included in the associated data
section of the variable-length symmetric key-token. Valid only with the DES algorithm, and only for
a DES key in a fixed-length symmetric key-token.</entry>
</row>
<row>
<entry align="left" valign="top"><synph><kwd>PKCSOAEP</kwd></synph></entry>
<entry align="left" valign="top">Specifies using the method found in RSA DSI PKCS #1V2 OAEP. See
<xref href="wskc_c_appdpkcs1form.dita#l0wskc02_appdpkcs1form"/>. The default hash method is
<synph><kwd>SHA-1</kwd></synph>. Use the <synph><kwd>SHA-256</kwd></synph> keyword for the SHA-256
hash method. Use the <synph><kwd>SHA-384</kwd></synph> keyword for the SHA-384 hash method. Use the
<synph><kwd>SHA-512</kwd></synph> keyword for the SHA-512 hash method.</entry>
</row>
<row>
<entry align="left" valign="top"><synph><kwd>PKCS-1.2</kwd></synph></entry>
<entry align="left" valign="top">Specifies using the method found in RSA DSI PKCS #1 block type 02
to recover the symmetric key. <ph>In the RSA PKCS #1 v2.0 standard, RSA terminology describes this
as the RSAES-PKCS1-v1_5 format.</ph> See <xref
href="wskc_c_appdpkcs1form.dita#l0wskc02_appdpkcs1form"/>.</entry>
</row>
<row>
<entry align="left" valign="top"><synph><kwd>PKOAEP2</kwd></synph></entry>
<entry align="left" valign="top">Specifies that the key is formatted as defined in the RSA PKCS #1
v2.1 standard for the RSAES-OAEP encryption mechanism. Valid only with algorithm
<synph><kwd>HMAC</kwd></synph>. See <xref href="wskc_c_appdpkcs1form.dita#l0wskc02_appdpkcs1form"
/>.</entry>
</row>
<row>
<entry align="left" valign="top"><synph><kwd>ZERO-PAD</kwd></synph></entry>
<entry align="left" valign="top">The clear key is right-aligned in the field provided, and the field
is padded to the left with zeros up to the size of the RSA encryption block (which is the modulus
length).</entry>
</row>
<row>
<entry nameend="col2" namest="col1"><b><i>Hash method</i></b> (One, optional for
<synph><kwd>PKCSOAEP</kwd></synph>, required for <synph><kwd>PKOAEP2</kwd></synph>. Not valid with
any other key formatting
method)<!--Keyword PKCSOAEP makes reference to these choices, so any change here should be reflected above also.--></entry>
</row>
<row>
<entry><synph><kwd>SHA-1</kwd></synph></entry>
<entry>Specifies to use the SHA-1 hash method to calculate the OAEP message hash. Valid only with
key-formatting methods <synph><kwd>PKCSOAEP</kwd></synph> or <synph><kwd>PKOAEP2</kwd></synph>. This
is the default for <synph><kwd>PKCSOAEP</kwd></synph>.</entry>
</row>
<row>
<entry><synph><kwd>SHA-256</kwd></synph></entry>
<entry>Specifies to use the SHA-256 hash method to calculate the OAEP message hash. Valid only with
key-formatting methods <synph><kwd>PKCSOAEP</kwd></synph> or
<synph><kwd>PKOAEP2</kwd></synph>.</entry>
</row>
<row>
<entry><synph><kwd>SHA-384</kwd></synph></entry>
<entry>Specifies to use the SHA-384 hash method to calculate the OAEP message hash. Valid only with
key-formatting method <synph><kwd>PKOAEP2</kwd></synph>.</entry>
</row>
<row>
<entry><synph><kwd>SHA-512</kwd></synph></entry>
<entry>Specifies to use the SHA-512 hash method to calculate the OAEP message hash. Valid only with
key-formatting method <synph><kwd>PKOAEP2</kwd></synph>.</entry>
</row>
<row rev="sh20i1">
<entry namest="col1" nameend="col2"><b><i>Certificate validation method</i></b> 
(One required when the input is an X.509 certificate. Otherwise, must not be specified.)</entry>
</row>
<row rev="sh20i1">
<entry>RFC-2459</entry>
<entry>Attempt to validate the certificate using the semantics of RFC-2459.</entry>
</row>
<row rev="sh20i1">
<entry>RFC-3280</entry>
<entry>Attempt to validate the certificate using the semantics of RFC-3280</entry>
</row>
<row rev="sh20i1">
<entry>RFC-5280</entry>
<entry>Attempt to validate the certificate using the semantics of RFC-5280</entry>
</row>
<row rev="sh20i1">
<entry>RFC-ANY</entry>
<entry>Attempt to validate the certificate using first the semantics of RFC-2459, then RFC-3280, and
then RFC-5280. If the certificate is not compliant with any RFC, the first error encountered (from
RFC-2459 processing) is returned.</entry>
</row>
<row rev="sh20i1">
<entry namest="col1" nameend="col2"><b><i>Public Key Infrastructure Usage 
(one optional when the input is an X.509 certificate. Otherwise,
must not be specified).</i></b></entry>
</row>
<row rev="sh20i1">
<entry>PKI-CHK</entry>
<entry>Specifies that the X.509 certificate for the other party (KRD) is to be validated against the
trust chain of the PKI hosted in the adapter. This requires that the CA credentials have been
installed using the Trusted Key Entry (TKE) workstation. <p>This is the default.</p></entry>
</row>
<row rev="sh20i1">
<entry>PKI-NONE</entry>
<entry>Specifies that the X.509 certificate for the other party (KRD) is not to be validated against
the trust chain of the PKI hosted in the adapter. This is suitable if the certificate has been
validated using host-based PKI services.</entry>
</row>
</tbody>
</tgroup>
</table></pd>
</plentry><plentry>
<pt>source_key_identifier_length</pt>
<pd><table colsep="0" frame="none" outputclass="presentation" pgwide="2" rowsep="0">
<tgroup cols="2">
<colspec colname="col1" colwidth="1*"/>
<colspec colname="col2" colwidth="5*"/>
<tbody>
<row>
<entry colname="col1"><b>Direction:</b></entry>
<entry colname="col2">Input</entry>
</row>
<row>
<entry colname="col1"><b>Type:</b></entry>
<entry colname="col2">Integer</entry>
</row>
</tbody>
</tgroup>
</table>The length of the <synph><var>source_key_identifier</var></synph> parameter. The minimum
size is 64 bytes. The maximum size is 725 bytes.</pd>
</plentry><plentry>
<pt>source_key_identifier</pt>
<pd><table colsep="0" frame="none" outputclass="presentation" pgwide="2" rowsep="0">
<tgroup cols="2">
<colspec colname="col1" colwidth="1*"/>
<colspec colname="col2" colwidth="5*"/>
<tbody>
<row>
<entry colname="col1"><b>Direction:</b></entry>
<entry colname="col2">Input</entry>
</row>
<row>
<entry colname="col1"><b>Type:</b></entry>
<entry colname="col2">String</entry>
</row>
</tbody>
</tgroup>
</table>The label or internal token of a secure AES DATA (version <ph>X'04'</ph>), DES DATA, or
variable-length symmetric key token to encrypt under the supplied RSA public key or AES EXPORTER
key. The key in the key identifier must match the algorithm in the
<synph><var>rule_array</var></synph>. DES is the default algorithm.</pd>
</plentry><plentry>
<pt>transporter_key_identifier_length</pt>
<pd><table colsep="0" frame="none" outputclass="presentation" pgwide="2" rowsep="0">
<tgroup cols="2">
<colspec colname="col1" colwidth="1*"/>
<colspec colname="col2" colwidth="5*"/>
<tbody>
<row>
<entry colname="col1"><b>Direction:</b></entry>
<entry colname="col2">Input</entry>
</row>
<row>
<entry colname="col1"><b>Type:</b></entry>
<entry colname="col2">Integer</entry>
</row>
</tbody>
</tgroup>
</table>The length of the <synph><var>transporter_key_identifier</var></synph> parameter. The
maximum size is 3500 bytes for an RSA key token or 725 for an AES EXPORTER key token. The length
must be 64 if <synph><var>transporter_key_identifier</var></synph> is a label.</pd>
</plentry><plentry>
<pt>transporter_key_identifier</pt>
<pd><table colsep="0" frame="none" outputclass="presentation" pgwide="2" rowsep="0">
<tgroup cols="2">
<colspec colname="col1" colwidth="1*"/>
<colspec colname="col2" colwidth="5*"/>
<tbody>
<row>
<entry colname="col1"><b>Direction:</b></entry>
<entry colname="col2">Input</entry>
</row>
<row>
<entry colname="col1"><b>Type:</b></entry>
<entry colname="col2">String</entry>
</row>
</tbody>
</tgroup>
</table>A pointer to a string variable containing an RSA public key token, AES EXPORTER token, or
label of the key to protect the exported symmetric key.<p>When the <synph><kwd>AESKW</kwd></synph>
key formatting method is specified, this parameter must be an AES EXPORTER key token or label with
the EXPORT bit on in the key-usage field. Otherwise, this parameter must be an RSA public key token
or label.</p></pd>
</plentry><plentry>
<pt>enciphered_key_length</pt>
<pd><table colsep="0" frame="none" outputclass="presentation" pgwide="2" rowsep="0">
<tgroup cols="2">
<colspec colname="col1" colwidth="1*"/>
<colspec colname="col2" colwidth="5*"/>
<tbody>
<row>
<entry colname="col1"><b>Direction:</b></entry>
<entry colname="col2">Input/Output</entry>
</row>
<row>
<entry colname="col1"><b>Type:</b></entry>
<entry colname="col2">Integer</entry>
</row>
</tbody>
</tgroup>
</table>The length of the <synph><var>enciphered_key</var></synph> parameter. This variable is
updated with the actual length of the <synph><var>enciphered_key</var></synph> generated. The
maximum size you can specify in this parameter is 900 bytes.</pd>
</plentry><plentry>
<pt>enciphered_key</pt>
<pd><table colsep="0" frame="none" outputclass="presentation" pgwide="2" rowsep="0">
<tgroup cols="2">
<colspec colname="col1" colwidth="1*"/>
<colspec colname="col2" colwidth="5*"/>
<tbody>
<row>
<entry colname="col1"><b>Direction:</b></entry>
<entry colname="col2">Output</entry>
</row>
<row>
<entry colname="col1"><b>Type:</b></entry>
<entry colname="col2">String</entry>
</row>
</tbody>
</tgroup>
</table>A pointer to a string variable containing the key after it has been formatted and enciphered
by the transport key. The enciphered key is returned either as an opaque data buffer or in an
external variable-length symmetric key-token. For key-formatting method
<synph><kwd>PKOAEP2</kwd></synph>, the key token has no key verification pattern.</pd>
</plentry></parml></section>
</refbody>
</reference>
<?Pub *0000011608?>
